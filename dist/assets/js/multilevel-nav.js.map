{"version":3,"names":[],"mappings":"","sources":["multilevel-nav.js"],"sourcesContent":["/*!\n  * Multilevel nav v4.0.0 Beta\n  */\n\n/*\n    TODO:\n    - Fix focus out of last item in navbar\n    - Arrow keys for child menus\n    - Fix slide over keyboard trapping if not in a navbar\n*/\n\nlet mlnCurrent = 1;\nclass MultilevelNav {\n    \n    // Get browser width with or without scrollbar\n    static viewport() {\n        let view = window;\n        let viewString = 'inner';\n\n        if (!('innerWidth' in window)) {\n            viewString = 'client';\n            view = document.documentElement || document.body;\n        }\n\n        return {\n            width: view[viewString + 'Width'],\n            height: view[viewString + 'Height']\n        };\n    }\n\n    // Custom event creator helper\n    static createCustomEvent(name, detail = null) {\n        return new CustomEvent(name, {\n            bubbles: true,\n            cancelable: true,\n            detail: detail\n        });\n    }\n\n    // HoverIntent implementation (replacing jQuery plugin)\n    static hoverIntent(element, options) {\n        const settings = Object.assign({\n            sensitivity: 7,\n            interval: 100,\n            timeout: 0,\n            over: () => {},\n            out: () => {}\n        }, options || {});\n        \n        let x, y, pX, pY;\n        let mouseover = false;\n        let timer;\n        \n        const track = (e) => {\n            x = e.clientX;\n            y = e.clientY;\n        }\n        \n        const compare = (e) => {\n            if (Math.abs(pX - x) + Math.abs(pY - y) < settings.sensitivity) {\n                element.removeEventListener('mousemove', track);\n                mouseover = true;\n                \n                if (timer) clearTimeout(timer);\n                settings.over.call(element, e);\n            } else {\n                pX = x;\n                pY = y;\n                timer = setTimeout(() => compare(e), settings.interval);\n            }\n        }\n        \n        const delay = (e) => {\n            if (timer) clearTimeout(timer);\n            mouseover = false;\n            \n            if (settings.timeout) {\n                timer = setTimeout(() => {\n                    if (!mouseover) settings.out.call(element, e);\n                }, settings.timeout);\n            } else {\n                settings.out.call(element, e);\n            }\n        }\n        \n        const handleMouseOver = (e) => {\n            if (timer) clearTimeout(timer);\n            \n            mouseover = true;\n            pX = e.clientX;\n            pY = e.clientY;\n            \n            element.addEventListener('mousemove', track);\n            timer = setTimeout(() => compare(e), settings.interval);\n        }\n        \n        const handleMouseOut = (e) => {\n            if (timer) clearTimeout(timer);\n            element.removeEventListener('mousemove', track);\n            \n            if (mouseover) {\n                delay(e);\n            }\n        }\n        \n        // Attach events\n        element.addEventListener('mouseenter', handleMouseOver);\n        element.addEventListener('mouseleave', handleMouseOut);\n        \n        // Return object with cleanup method\n        return {\n            remove: () => {\n                element.removeEventListener('mouseenter', handleMouseOver);\n                element.removeEventListener('mouseleave', handleMouseOut);\n                element.removeEventListener('mousemove', track);\n                if (timer) clearTimeout(timer);\n            }\n        };\n    }\n\n    // Constructor for MultilevelNav\n    constructor(element, options = {}) {\n        if (!element) return;\n        \n        // Store element reference\n        this.element = element;\n        \n        // Setting defaults\n        this.settings = Object.assign({\n            hoverIntent: false,\n            hoverIntentTimeout: 250,\n            autoCloseNavbarMenus: true,\n            autoDirection: true,\n            toggleOnClickOnly: false,\n            expandActiveItem: false,\n            offCanvasScrollToActiveItem: false,\n            wholeLinkToggler: false,\n            topLevelWholeLinkToggler: false,\n            navbarMenuBackdrop: false,\n            navbarMegaMenuBackdrop: false,\n            activeSelector: '.active',\n            menuCloseOnInPageAnchorClick: false,\n            expanderCloseOnInPageAnchorClick: false,\n            autoCloseInactiveMenu: true,\n            excludeLevel: '-1',\n            childMenuTogglerSymbol: '<span class=\"mln__toggle-btn__chevron\"></span>',\n            keepMenuOpenOnFocusOut: false\n        }, options || {});\n\n        // Element selectors\n        this.mlnParentList = element.querySelector('.mln__list');\n        this.mlnExpander = element.querySelector('.mln__expander');\n        this.mlnDataBreakpoint = (element.getAttribute('data-mln-breakpoint')) ? parseInt(element.getAttribute('data-mln-breakpoint')) : undefined;\n        this.mlnToggleBtnVerbiage = 'Toggle items under';\n        this.mlnTransitionEnd = 'transitionend';\n        this.body = document.body;\n        this.mlnIsPageLoaded = false;\n        this.touchDrag = false;\n        this.isCurrentMenuFocused = false;\n        \n        // Setup resize event if it hasn't been set up yet\n        if (!window.mlnResizeEventSet) {\n            this.setupResizeEvent();\n            window.mlnResizeEventSet = true;\n        }\n        \n        // Initialize the navigation\n        this.init();\n    }\n    \n    // Sets up the resize event for the window\n    setupResizeEvent() {\n        let windowWidth = window.innerWidth;\n        let resizeTO;\n        \n        window.addEventListener('resize', () => {\n            let newWindowWidth = window.innerWidth;\n            \n            if (windowWidth !== newWindowWidth) {\n                if (resizeTO) {\n                    clearTimeout(resizeTO);\n                }\n                \n                resizeTO = setTimeout(() => {\n                    window.dispatchEvent(MultilevelNav.createCustomEvent('mlnResizeEnd'));\n                }, 150);\n            }\n            \n            windowWidth = newWindowWidth;\n        });\n    }\n    \n    // Initialize all navigation components\n    init() {\n        if (!this.mlnParentList) return;\n        \n        // Setup expander and add helper divs\n        this.setupExpander();\n        \n        // Add depth classes to list items\n        this.setupDepthClasses();\n        \n        // Set up child lists\n        this.setupChildLists();\n        \n        // Set up mega menus\n        this.setupMegaMenus();\n        \n        // Add mega menu modifier class to top level\n        this.setupMegaMenuModifier();\n        \n        // Wrap the parent links in their own div\n        this.wrapParentLinks();\n        \n        // Add toggle buttons to list items with children\n        this.addToggleButtons();\n        \n        // Assign IDs and ARIA attributes\n        this.assignIdsAndAria();\n        \n        // Handle in-page anchor clicks\n        this.setupCloseOnAnchorClick();\n        \n        // Set up whole link expansion if needed\n        this.setupWholeLinkExpand();\n        \n        // Set up button click events\n        this.setupToggleButtonEvents();\n        \n        // Set up hover events if needed\n        this.setupHoverEvents();\n        \n        // Set up keyboard navigation\n        this.setupKeyboardNavigation();\n        \n        // Set up transition events\n        this.setupTransitionEvents();\n        \n        // Setup resize handlers\n        this.setupResizeHandlers();\n        \n        // Perform initial actions\n        this.expandActiveItem();\n        this.toggleExpander(false);\n        this.assignFlowDirection();\n        \n        // Add loaded class\n        this.element.classList.add('mln--js-loaded');\n        \n        // Trigger initialized event\n        this.element.dispatchEvent(MultilevelNav.createCustomEvent('initialized.mln'));\n        this.updateVisibleMenu();\n        mlnCurrent++;\n    }\n    \n    // Setup expander and add helper divs\n    setupExpander() {\n        if (this.mlnExpander) {\n            // Create helper div\n            const helperDiv = document.createElement('div');\n            helperDiv.classList.add('mln__expander__helper');\n            \n            // Move all children to the helper div instead of replacing innerHTML\n            while (this.mlnExpander.firstChild) {\n                helperDiv.appendChild(this.mlnExpander.firstChild);\n            }\n            \n            // Append the helper div to the expander\n            this.mlnExpander.appendChild(helperDiv);\n            \n            // Set up expand button click handler\n            const expanderButton = this.element.querySelector('.mln__expand-btn');\n            if (expanderButton) {\n                expanderButton.addEventListener('click', () => {\n                    this.toggleExpander();\n                });\n            }\n        }\n    }\n    \n    // Add depth class to nested list items\n    setupDepthClasses() {\n        const nestedLi = this.mlnParentList.querySelectorAll('li:not(.mln__child__mega-menu li)');\n        nestedLi.forEach(li => {\n            // Count parent li elements to determine level\n            let level = 1;\n            let parent = li.parentElement;\n            \n            while (parent && parent !== this.mlnParentList) {\n                if (parent.nodeName === 'LI') {\n                    level++;\n                }\n                parent = parent.parentElement;\n            }\n            \n            li.classList.add('mln__level-' + level);\n        });\n    }\n    \n    // Find and modify mega menus\n    setupMegaMenus() {\n        const megaMenus = this.mlnParentList.querySelectorAll('.mln__child__mega-menu');\n        megaMenus.forEach(megaMenu => {\n            const collapseDiv = document.createElement('div');\n            collapseDiv.classList.add('mln__child__collapse');\n            collapseDiv.setAttribute('tabindex', '-1');\n            \n            const helperDiv = document.createElement('div');\n            helperDiv.classList.add('mln__child__collapse__helper');\n            \n            // Insert the wrapper structure before the mega menu\n            megaMenu.parentNode.insertBefore(collapseDiv, megaMenu);\n            collapseDiv.appendChild(helperDiv);\n            helperDiv.appendChild(megaMenu);\n            \n            // Find closest li and add the has-child class\n            const parentLi = collapseDiv.closest('li');\n            if (parentLi) {\n                parentLi.classList.add('mln__has-child');\n            }\n        });\n        \n        // Add mega menu backdrop\n        if (this.settings.navbarMegaMenuBackdrop && !document.querySelector('.mln-backdrop')) {\n            const backdrop = document.createElement('div');\n            backdrop.classList.add('mln-backdrop');\n            this.body.appendChild(backdrop);\n        }\n    }\n    \n    // Find and modify child lists\n    setupChildLists() {\n        const excludedSelector = `.mln__level-${this.settings.excludeLevel} > ul, .mln__level-${this.settings.excludeLevel} > ul ul`;\n        const childLists = Array.from(this.mlnParentList.querySelectorAll('ul'));\n        const excludedLists = Array.from(this.mlnParentList.querySelectorAll(excludedSelector));\n        \n        // Filter out excluded lists\n        const listsToProcess = childLists.filter(list => !excludedLists.includes(list));\n       \n        listsToProcess.forEach(parentList => {\n            const existingCollapse = parentList.parentNode.querySelector('.mln__child__collapse');\n            \n            if (existingCollapse) {\n                // If there's already a collapse element, move the list to its helper\n                const parentCollapse = parentList.parentNode.querySelector('.mln__child__collapse__helper');\n                \n                if (parentCollapse) {\n                    parentList.classList.add('mln__child__list');\n                    parentCollapse.insertBefore(parentList, parentCollapse.firstChild);\n                }\n            } else if (!parentList.closest('.mln__child__mega-menu')) {\n                // Create new collapse structure\n                parentList.classList.add('mln__child__list');\n                \n                const collapseDiv = document.createElement('div');\n                collapseDiv.classList.add('mln__child__collapse');\n                collapseDiv.setAttribute('tabindex', '-1');\n                \n                const helperDiv = document.createElement('div');\n                helperDiv.classList.add('mln__child__collapse__helper');\n                \n                // Insert the wrapper structure before the list\n                parentList.parentNode.insertBefore(collapseDiv, parentList);\n                collapseDiv.appendChild(helperDiv);\n                helperDiv.appendChild(parentList);\n                \n                // Find closest li and add the has-child class\n                const parentLi = collapseDiv.closest('li');\n                if (parentLi) {\n                    parentLi.classList.add('mln__has-child');\n                }\n            }\n        });\n    }\n    \n    // Add mega menu modifier class to top level\n    setupMegaMenuModifier() {\n        const megaMenuElements = this.mlnParentList.querySelectorAll('.mln__child__mega-menu');\n        megaMenuElements.forEach(megaMenu => {\n            const closestLi = megaMenu.closest('li');\n            if (closestLi) {\n                closestLi.classList.add('mln__has-child--mega-menu');\n            }\n        });\n    }\n    \n    // Wrap the parent <a> tag in its own div\n    wrapParentLinks() {\n        const hasChildElements = this.mlnParentList.querySelectorAll('.mln__has-child');\n        hasChildElements.forEach(hasChild => {\n            const directLink = Array.from(hasChild.children).find(child => \n                child.tagName === 'A'\n            );\n            \n            if (directLink) {\n                const controlsDiv = document.createElement('div');\n                controlsDiv.classList.add('mln__child-controls');\n                \n                // Insert wrapper before the link\n                directLink.parentNode.insertBefore(controlsDiv, directLink);\n                \n                // Move link into wrapper\n                controlsDiv.appendChild(directLink);\n            }\n        });\n    }\n    \n    // Add a toggle button to list items with children\n    addToggleButtons() {\n        const childNavControls = this.mlnParentList.querySelectorAll('.mln__child-controls');\n        childNavControls.forEach(control => {\n            const parentLink = control.querySelector('a');\n            \n            if (parentLink) {\n                const linkText = parentLink.textContent.trim();\n                const ariaLabelValue = this.mlnToggleBtnVerbiage + ' ' + linkText;\n                \n                const toggleBtn = document.createElement('button');\n                toggleBtn.classList.add('mln__toggle-btn');\n                toggleBtn.setAttribute('type', 'button');\n                toggleBtn.setAttribute('aria-label', ariaLabelValue);\n                toggleBtn.innerHTML = this.settings.childMenuTogglerSymbol;\n                \n                control.appendChild(toggleBtn);\n            }\n        });\n    }\n    \n    // Assign IDs and attributes to child menu elements\n    assignIdsAndAria() {\n        \n        // Assign IDs and attributes to child collapse elements\n        const childCollapse = this.mlnParentList.querySelectorAll('.mln__child__collapse');\n        childCollapse.forEach((collapse, index) => {\n            const childCollapseId = 'mln' + mlnCurrent + 'ChildCollapse' + (index + 1);\n            \n            collapse.setAttribute('aria-hidden', 'true');\n            collapse.setAttribute('data-mln-active-status', 'off');\n            collapse.setAttribute('id', childCollapseId);\n            \n            const parentLi = collapse.closest('li');\n            if (parentLi) {\n                const toggleBtn = parentLi.querySelector('.mln__toggle-btn');\n                if (toggleBtn) {\n                    toggleBtn.setAttribute('aria-expanded', 'false');\n                    toggleBtn.setAttribute('aria-controls', childCollapseId);\n                }\n            }\n        });\n        \n        // Assign IDs and aria attributes to expander elements\n        if (this.mlnExpander) {\n            const mlnExpanderId = 'mln' + mlnCurrent + 'Expander1';\n            \n            this.mlnExpander.setAttribute('aria-hidden', 'true');\n            this.mlnExpander.setAttribute('id', mlnExpanderId);\n            \n            const expandBtn = this.element.querySelector('.mln__expand-btn');\n            if (expandBtn) {\n                expandBtn.setAttribute('aria-expanded', 'false');\n                expandBtn.setAttribute('aria-controls', mlnExpanderId);\n            }\n        }\n    }\n    \n    // Setup handlers for in-page anchor clicks\n    setupCloseOnAnchorClick() {\n        // Close main nav child menu if in-page anchor is clicked\n        if (this.settings.menuCloseOnInPageAnchorClick) {\n            const anchors = this.element.querySelectorAll('a');\n            \n            anchors.forEach(anchor => {\n                const href = anchor.getAttribute('href');\n                \n                if (!href) return;\n                \n                const firstChar = href.charAt(0);\n                const isPageAnchor = (firstChar === '#');\n                \n                anchor.addEventListener('click', (e) => {\n                    if (\n                        isPageAnchor &&\n                        !e.target.closest('.mln__toggle-link') &&\n                        window.matchMedia(`(min-width: ${this.mlnDataBreakpoint}px)`).matches\n                    ) {\n                        const showingMenus = this.element.querySelectorAll('.mln__has-child--showing');\n                        showingMenus.forEach(menu => {\n                            this.toggleChild(menu, 'hide', true);\n                        });\n                    }\n                });\n            });\n        }\n        \n        // Close expander if in-page anchor is clicked\n        if (this.settings.expanderCloseOnInPageAnchorClick) {\n            const anchors = this.element.querySelectorAll('a');\n            \n            anchors.forEach(anchor => {\n                const href = anchor.getAttribute('href');\n                \n                if (!href) return;\n                \n                const firstChar = href.charAt(0);\n                const isPageAnchor = (firstChar === '#');\n                \n                anchor.addEventListener('click', (e) => {\n                    if (\n                        isPageAnchor &&\n                        !e.target.closest('.mln__toggle-link')\n                    ) {\n                        this.toggleExpander('hide');\n                    }\n                });\n            });\n        }\n    }\n    \n    // Set up whole link click expansion if needed\n    setupWholeLinkExpand() {\n        if (!this.settings.wholeLinkToggler && !this.settings.topLevelWholeLinkToggler) {\n            return;\n        }\n        \n        let wholeElements = [];\n        \n        if (this.settings.wholeLinkToggler) {\n            wholeElements = Array.from(this.mlnParentList.querySelectorAll('.mln__child-controls > a'));\n            this.element.classList.add('mln--whole-link-expand');\n        }\n        \n        if (this.settings.topLevelWholeLinkToggler) {\n            // Select only the direct children of mlnParentList that are .mln__has-child\n            const topLevelItems = Array.from(this.mlnParentList.children)\n                .filter(child => child.classList.contains('mln__has-child'));\n            \n            wholeElements = topLevelItems\n                .map(item => item.querySelector('.mln__child-controls > a'))\n                .filter(Boolean);\n            \n            this.element.classList.remove('mln--whole-link-expand');\n            this.element.classList.add('mln--top-level-whole-link-expand');\n        }\n        \n        wholeElements.forEach(wholeElement => {\n            const closestHasChild = wholeElement.closest('.mln__has-child');\n            const closestToggleBtn = closestHasChild.querySelector('.mln__toggle-btn');\n            \n            if (!closestToggleBtn) return;\n            \n            const ariaExpandedValue = closestToggleBtn.getAttribute('aria-expanded');\n            const ariaControlsValue = closestToggleBtn.getAttribute('aria-controls');\n            \n            const toggleIndicator = document.createElement('span');\n            toggleIndicator.classList.add('mln__toggle-indicator');\n            toggleIndicator.innerHTML = this.settings.childMenuTogglerSymbol;\n            wholeElement.appendChild(toggleIndicator);\n            \n            wholeElement.classList.add('mln__toggle-link');\n            wholeElement.setAttribute('role', 'button');\n            wholeElement.setAttribute('aria-expanded', ariaExpandedValue);\n            wholeElement.setAttribute('aria-controls', ariaControlsValue);\n            \n            wholeElement.addEventListener('click', (e) => {\n                wholeElement.focus();\n                e.preventDefault();\n            });\n            \n            // Remove the original toggle button\n            closestToggleBtn.remove();\n        });\n    }\n    \n    // Set up toggle button click events\n    setupToggleButtonEvents() {\n        const toggleButtons = this.mlnParentList.querySelectorAll('.mln__toggle-btn, .mln__toggle-link');\n        this.touchDrag = false;\n        \n        // Add touchmove listener for iOS fix\n        toggleButtons.forEach(button => {\n            button.addEventListener('touchmove', () => {\n                this.touchDrag = true;\n            }, { passive: true });\n        });\n        \n        // Handle click and touch events\n        toggleButtons.forEach(button => {\n            const handleInteraction = (e) => {\n                e.stopPropagation();\n                e.preventDefault();\n                \n                const hasChildParent = button.closest('.mln__has-child');\n                if (!hasChildParent) return;\n                \n                const associatedMenu = hasChildParent.querySelector('.mln__child__collapse');\n                if (!associatedMenu) return;\n                \n                // Find sibling elements that are showing\n                const siblingShowing = Array.from(\n                    hasChildParent.parentElement.querySelectorAll('.mln__has-child--showing')\n                ).filter(el => el !== hasChildParent);\n                \n                if (\n                    (e.type === 'click' || e.type === 'touchend') &&\n                    !this.touchDrag &&\n                    !this.element.querySelector('.mln__has-child--showing.mln__child--transitioning')\n                ) {\n                    if (\n                        window.matchMedia(`(min-width: ${this.mlnDataBreakpoint}px)`).matches &&\n                        this.settings.autoCloseNavbarMenus === true &&\n                        !button.closest('.mln--expand-above-breakpoint') &&\n                        button.closest('.mln--navbar')\n                    ) {\n                        associatedMenu.setAttribute('data-mln-active-status', 'off');\n                        siblingShowing.forEach(sibling => {\n                            this.toggleChild(sibling, 'hide', true);\n                        });\n                    }\n                    \n                    if (hasChildParent.classList.contains('mln__has-child--showing')) {\n                        this.toggleChild(button, 'hide', true);\n                        associatedMenu.setAttribute('data-mln-active-status', 'off');\n                    } else {\n                        this.toggleChild(button, 'show', true);\n                        associatedMenu.setAttribute('data-mln-active-status', 'on');\n                    }\n                }\n                \n                this.touchDrag = false;\n            };\n            \n            button.addEventListener('touchend', handleInteraction);\n            button.addEventListener('click', handleInteraction);\n        });\n    }\n    \n    // Set up hover events if needed\n    setupHoverEvents() {\n        if (this.settings.toggleOnClickOnly) {\n            return;\n        }\n        \n        const hasChildElements = this.mlnParentList.querySelectorAll('.mln__has-child');\n        \n        hasChildElements.forEach(hasChild => {\n            const associatedMenu = hasChild.querySelector('.mln__child__collapse');\n            \n            // Hover functions\n            const showMenu = () => {\n                if (associatedMenu) {\n                    associatedMenu.setAttribute('data-mln-active-status', 'on');\n                }\n                \n                if (\n                    window.matchMedia(`(min-width: ${this.mlnDataBreakpoint}px)`).matches &&\n                    hasChild.closest('.mln--navbar')\n                ) {\n                    this.toggleChild(hasChild, 'show', true);\n                }\n            };\n            \n            const hideMenu = () => {\n                if (associatedMenu) {\n                    associatedMenu.setAttribute('data-mln-active-status', 'off');\n                }\n                \n                if (\n                    window.matchMedia(`(min-width: ${this.mlnDataBreakpoint}px)`).matches &&\n                    associatedMenu && \n                    associatedMenu.getAttribute('aria-hidden') === 'false' &&\n                    hasChild.closest('.mln--navbar')\n                ) {\n                    this.toggleChild(hasChild, 'hide', true);\n                }\n            };\n            \n            if (this.settings.hoverIntent) {\n                // Use hoverIntent implementation\n                MultilevelNav.hoverIntent(hasChild, {\n                    over: showMenu,\n                    timeout: this.settings.hoverIntentTimeout,\n                    out: hideMenu\n                });\n            } else {\n                // Use standard hover events\n                hasChild.addEventListener('mouseenter', () => {\n                    if (\n                        window.matchMedia(`(min-width: ${this.mlnDataBreakpoint}px)`).matches &&\n                        hasChild.closest('.mln--navbar')\n                    ) {\n                        if (hasChild.classList.contains('mln__has-child--showing')) {\n                            if (associatedMenu) {\n                                associatedMenu.setAttribute('data-mln-active-status', 'off');\n                            }\n                            this.toggleChild(hasChild, 'hide', true);\n                        } else {\n                            if (associatedMenu) {\n                                associatedMenu.setAttribute('data-mln-active-status', 'on');\n                            }\n                            this.toggleChild(hasChild, 'show', true);\n                        }\n                    }\n                });\n                \n                hasChild.addEventListener('mouseleave', () => {\n                    if (\n                        window.matchMedia(`(min-width: ${this.mlnDataBreakpoint}px)`).matches &&\n                        hasChild.closest('.mln--navbar')\n                    ) {\n                        if (associatedMenu) {\n                            associatedMenu.setAttribute('data-mln-active-status', 'off');\n                        }\n                        this.toggleChild(hasChild, 'hide', true);\n                    }\n                });\n            }\n        });\n    }\n    \n    // Set up keyboard navigation\n    setupKeyboardNavigation() {\n        if (!this.mlnParentList) return;\n        \n        this.isCurrentMenuFocused = false;\n        \n        this.mlnParentList.addEventListener('keydown', (e) => {\n            const pressedKeyCode = e.keyCode;\n            const eTarget = e.target;\n            \n            // Escape key pressed (keyCode 27)\n            if (pressedKeyCode === 27) {\n                const associatedMenu = eTarget.closest('.mln__has-child--showing');\n                \n                if (associatedMenu) {\n                    // Find and focus the toggle button\n                    const toggleButton = associatedMenu.querySelector('.mln__toggle-btn, .mln__toggle-link');\n                    \n                    if (toggleButton) {\n                        toggleButton.focus();\n                    }\n                    \n                    // Hide the menu\n                    this.toggleChild(associatedMenu, 'hide', true);\n                }\n            }\n            \n            // Tab key pressed (keyCode 9)\n            if (\n                pressedKeyCode === 9 &&\n                eTarget.getAttribute('aria-expanded') === 'false' &&\n                eTarget.parentNode.nextElementSibling &&\n                eTarget.parentNode.nextElementSibling.classList.contains('mln__child__collapse') &&\n                eTarget.parentNode.nextElementSibling.classList.contains('mln__child--transitioning')\n            ) {\n                // Find the next focusable anchor\n                let nextFocusableAnchor = null;\n                const nextItem = eTarget.closest('.mln__has-child').nextElementSibling;\n                \n                if (nextItem) {\n                    nextFocusableAnchor = nextItem.querySelector('a');\n                }\n                \n                if (!nextFocusableAnchor) {\n                    const nextTopLevel = eTarget.closest('.mln__level-1').nextElementSibling;\n                    \n                    if (nextTopLevel) {\n                        nextFocusableAnchor = nextTopLevel.querySelector('a');\n                    }\n                    \n                    // Close all showing menus\n                    const showingItems = this.element.querySelectorAll('.mln__has-child--showing');\n                    showingItems.forEach(item => {\n                        this.toggleChild(item, 'hide', true);\n                    });\n                }\n                \n                if (nextFocusableAnchor) {\n                    e.preventDefault();\n                    nextFocusableAnchor.focus();\n                }\n            }\n        });\n        \n        // Close inactive menus when tabbing out of them\n        this.mlnParentList.addEventListener('keyup', (e) => {\n            const eTarget = e.target;\n            \n            if (\n                !eTarget.closest('.mln__has-child--showing') &&\n                window.matchMedia(`(min-width: ${this.mlnDataBreakpoint}px)`).matches &&\n                this.settings.autoCloseInactiveMenu === true &&\n                eTarget.closest('.mln--navbar')\n            ) {\n                const showingItems = this.element.querySelectorAll('.mln__has-child--showing');\n                showingItems.forEach(item => {\n                    this.toggleChild(item, 'hide', true);\n                });\n            }\n        });\n        \n        // Close any menu when leaving currently focused menu parent\n        if (!this.settings.keepMenuOpenOnFocusOut) {\n            this.mlnParentList.addEventListener('focusout', (e) => {\n                setTimeout(() => {\n                    if (window.matchMedia(`(min-width: ${this.mlnDataBreakpoint}px)`).matches) {\n                        const activeElement = document.activeElement;\n                        const nonActiveMenus = Array.from(document.querySelectorAll('.mln--navbar')).filter(\n                            menu => !menu.contains(activeElement)\n                        );\n                        \n                        nonActiveMenus.forEach(menu => {\n                            const showingItems = menu.querySelectorAll('.mln__has-child--showing');\n                            showingItems.forEach(item => {\n                                this.toggleChild(item, 'hide', true);\n                            });\n                        });\n                    }\n                    \n                    this.isCurrentMenuFocused = \n                        document.activeElement.closest('.mln--navbar') && \n                        document.activeElement.closest('.mln__list') ? true : false;\n\n                    if (\n                        !this.isCurrentMenuFocused &&\n                        window.matchMedia(`(min-width: ${this.mlnDataBreakpoint}px)`).matches &&\n                        e.type !== 'keydown' &&\n                        this.settings.autoCloseNavbarMenus === true &&\n                        e.target.closest('.mln--navbar') &&\n                        !document.activeElement.closest('.mln__has-child--showing')\n                    ) {\n                        const showingItems = this.element.querySelectorAll('.mln__has-child--showing');\n                        showingItems.forEach(item => {\n                            this.toggleChild(item, 'hide', true);\n                        });\n                    }\n                }, 150);\n            });\n        }\n    }\n    \n    // Setup transition events\n    setupTransitionEvents() {\n        // Add special class to the current showing menu\n        this.element.addEventListener('transition.mln.child', () => {\n            const visibleMenus = this.element.querySelectorAll('.mln__visible-menu');\n            visibleMenus.forEach(menu => menu.classList.remove('mln__visible-menu'));\n        });\n        \n        // Add event listeners for show/hide/initialize events\n        ['hide.mln.child', 'show.mln.child'].forEach(eventName => {\n            this.element.addEventListener(eventName, () => {\n                this.updateVisibleMenu();\n            });\n        });\n    }\n    \n    // Setup resize event handlers\n    setupResizeHandlers() {\n        window.addEventListener('mlnResizeEnd', () => {\n            if (\n                window.matchMedia(`(min-width: ${this.mlnDataBreakpoint}px)`).matches &&\n                this.settings.autoCloseNavbarMenus === true &&\n                this.settings.expandActiveItem === false\n            ) {\n                const showingItems = this.element.querySelectorAll('.mln__has-child--showing');\n                showingItems.forEach(item => {\n                    this.toggleChild(item, 'hide', false);\n                });\n                \n                if (this.mlnExpander) {\n                    this.mlnExpander.style.height = '';\n                    this.mlnExpander.classList.remove('mln__expander--showing');\n                }\n            }\n            \n            // Run functions after resize\n            this.expandActiveItem();\n            this.toggleExpander(false);\n            this.assignFlowDirection();\n        });\n    }\n    \n    // Update which menu is currently visible\n    updateVisibleMenu() {\n        const showingItems = this.element.querySelectorAll('.mln__has-child--showing');\n        \n        if (showingItems.length === 0) {\n            const mainList = this.element.querySelector('.mln__list');\n            if (mainList) {\n                mainList.classList.add('mln__visible-menu');\n            }\n        } else {\n            const lastShowing = showingItems[showingItems.length - 1];\n            if (lastShowing) {\n                lastShowing.classList.add('mln__visible-menu');\n            }\n        }\n    }\n    \n    // Show/hide menu(s)\n    toggleChild(el, action, animate) {\n        let mlnHasChild;\n        \n        // Handle different input types (element, event, or jQuery-like object)\n        if (el instanceof Element) {\n            mlnHasChild = el.closest('.mln__has-child');\n        } else if (el && el.target) {\n            mlnHasChild = el.target.closest('.mln__has-child');\n        } else if (el && el.closest) {\n            mlnHasChild = el.closest('.mln__has-child');\n        } else {\n            return;\n        }\n        \n        if (!mlnHasChild) return;\n        \n        const mlnChildToggler = mlnHasChild.querySelector('.mln__toggle-btn, .mln__toggle-link');\n        const mlnToggleChildCollapse = mlnHasChild.querySelector(':scope > .mln__child__collapse');\n        \n        if (!mlnChildToggler || !mlnToggleChildCollapse) return;\n        \n        let ariaExpandedValue;\n        let ariaHiddenValue;\n        \n        // Figure out what aria values to use\n        if (action === 'show') {\n            ariaExpandedValue = 'true';\n            ariaHiddenValue = 'false';\n        } else if (action === 'hide' || action === undefined) {\n            ariaExpandedValue = 'false';\n            ariaHiddenValue = 'true';\n        }\n        \n        // Trigger transition event\n        mlnHasChild.dispatchEvent(MultilevelNav.createCustomEvent('transition.mln.child'));\n        \n        // Correct toggler attributes\n        mlnChildToggler.setAttribute('aria-expanded', ariaExpandedValue);\n        \n        // Grab height of inner collapse elements\n        const collapseHelper = mlnToggleChildCollapse.querySelector('.mln__child__collapse__helper');\n        const collapseHeight = collapseHelper ? collapseHelper.offsetHeight : 0;\n        \n        // Show collapsible child elements\n        if (action === 'show') {\n            mlnHasChild.classList.add('mln__has-child--showing');\n            \n            const mlnAnyShowing = this.element.querySelectorAll('.mln__has-child--showing');\n            \n            // Add class to body for regular menu backdrop\n            if (\n                mlnAnyShowing.length && \n                this.element.classList.contains('mln--navbar') &&\n                this.settings.navbarMenuBackdrop === true\n            ) {\n                this.body.classList.add('js-mln-menu-showing');\n            }\n            \n            // Add class to body for mega menu backdrop\n            if (\n                mlnHasChild.classList.contains('mln__has-child--mega-menu') &&\n                this.element.classList.contains('mln--navbar') &&\n                this.settings.navbarMegaMenuBackdrop === true\n            ) {\n                this.body.classList.add('js-mln-mega-menu-showing');\n            }\n            \n            mlnHasChild.dispatchEvent(MultilevelNav.createCustomEvent('show.mln.child'));\n            \n            if (animate === true) {\n                mlnToggleChildCollapse.classList.add('mln__child--transitioning');\n                mlnToggleChildCollapse.style.height = collapseHeight + 'px';\n                mlnToggleChildCollapse.setAttribute('aria-hidden', ariaHiddenValue);\n                \n                const handleTransitionEnd = (e) => {\n                    if (e.target !== mlnToggleChildCollapse) return;\n                    \n                    mlnToggleChildCollapse.removeEventListener(this.mlnTransitionEnd, handleTransitionEnd);\n                    mlnToggleChildCollapse.style.height = 'auto';\n                    mlnToggleChildCollapse.classList.remove('mln__child--transitioning');\n                    mlnToggleChildCollapse.style.height = '';\n                    \n                    if (mlnToggleChildCollapse.getAttribute('aria-hidden') === 'false') {\n                        mlnToggleChildCollapse.classList.add('mln--height-auto');\n                        mlnToggleChildCollapse.classList.add('mln__child--overflow-visible');\n                    }\n                    \n                    mlnHasChild.dispatchEvent(MultilevelNav.createCustomEvent('shown.mln.child'));\n                    mlnHasChild.dispatchEvent(MultilevelNav.createCustomEvent('transitioned.mln.child'));\n                };\n                \n                mlnToggleChildCollapse.addEventListener(this.mlnTransitionEnd, handleTransitionEnd);\n            } else {\n                mlnToggleChildCollapse.style.height = 'auto';\n                mlnToggleChildCollapse.classList.add('mln--height-auto');\n                mlnToggleChildCollapse.setAttribute('aria-hidden', ariaHiddenValue);\n                mlnToggleChildCollapse.style.height = '';\n                mlnToggleChildCollapse.classList.add('mln__child--overflow-visible');\n                \n                mlnHasChild.dispatchEvent(MultilevelNav.createCustomEvent('shown.mln.child'));\n                mlnHasChild.dispatchEvent(MultilevelNav.createCustomEvent('transitioned.mln.child'));\n            }\n        }\n        \n        // Hide collapsible child elements\n        if (action === 'hide') {\n            mlnHasChild.classList.remove('mln__has-child--showing');\n            \n            const mlnAnyShowing = document.querySelectorAll('.mln--navbar .mln__has-child--showing');\n            \n            if (!mlnAnyShowing.length && document.querySelectorAll('.mln--navbar').length) {\n                this.body.classList.remove('js-mln-menu-showing');\n            }\n            \n            if (\n                mlnHasChild.classList.contains('mln__has-child--mega-menu') &&\n                !document.querySelector('.mln__has-child--mega-menu.mln__has-child--showing') &&\n                this.element.classList.contains('mln--navbar')\n            ) {\n                this.body.classList.remove('js-mln-mega-menu-showing');\n            }\n            \n            mlnHasChild.dispatchEvent(MultilevelNav.createCustomEvent('hide.mln.child'));\n            \n            if (animate === true) {\n                mlnToggleChildCollapse.style.height = collapseHeight + 'px';\n                mlnToggleChildCollapse.style.minHeight = collapseHeight + 'px';\n                mlnToggleChildCollapse.classList.remove('mln__child--overflow-visible', 'mln--height-auto');\n                mlnToggleChildCollapse.setAttribute('aria-hidden', ariaHiddenValue);\n                mlnToggleChildCollapse.classList.add('mln__child--transitioning');\n                \n                // Force a reflow to ensure the initial height is applied before transitioning\n                mlnToggleChildCollapse.offsetHeight;\n                \n                // Set up transition end handler before changing height\n                const handleTransitionEnd = (e) => {\n                    if (e.target !== mlnToggleChildCollapse) return;\n                    \n                    mlnToggleChildCollapse.removeEventListener(this.mlnTransitionEnd, handleTransitionEnd);\n                    mlnToggleChildCollapse.classList.remove('mln__child--transitioning');\n                    mlnHasChild.dispatchEvent(MultilevelNav.createCustomEvent('hidden.mln.child'));\n                    mlnHasChild.dispatchEvent(MultilevelNav.createCustomEvent('transitioned.mln.child'));\n                };\n                \n                mlnToggleChildCollapse.addEventListener(this.mlnTransitionEnd, handleTransitionEnd);\n                \n                // Prevent bubbling from child transitions\n                Array.from(mlnToggleChildCollapse.children).forEach(child => {\n                    child.addEventListener(this.mlnTransitionEnd, e => e.stopPropagation());\n                });\n                \n                // Trigger the transition by changing height\n                mlnToggleChildCollapse.style.height = '';\n                mlnToggleChildCollapse.style.minHeight = '';\n            } else {\n                mlnToggleChildCollapse.classList.remove('mln__child--overflow-visible', 'mln--height-auto');\n                mlnToggleChildCollapse.setAttribute('aria-hidden', ariaHiddenValue);\n                mlnToggleChildCollapse.style.height = '';\n                \n                mlnHasChild.dispatchEvent(MultilevelNav.createCustomEvent('hidden.mln.child'));\n                mlnHasChild.dispatchEvent(MultilevelNav.createCustomEvent('transitioned.mln.child'));\n            }\n        }\n    }\n    \n    // Show/hide expander items\n    toggleExpander(animate) {\n        if (!this.mlnExpander) return;\n        \n        const collapseHelper = this.mlnExpander.querySelector('.mln__expander__helper');\n        \n        if (animate !== false && collapseHelper) {\n            const collapseHeight = collapseHelper.offsetHeight;\n            const expandBtn = this.element.querySelector('.mln__expand-btn');\n            \n            if (!this.mlnExpander.classList.contains('mln__expander--showing')) {\n                this.mlnExpander.dispatchEvent(MultilevelNav.createCustomEvent('showing.mln.expander'));\n                \n                this.mlnExpander.classList.add('mln__expander--transitioning');\n                this.mlnExpander.style.height = collapseHeight + 'px';\n                this.mlnExpander.setAttribute('aria-hidden', 'false');\n                \n                if (expandBtn) {\n                    expandBtn.setAttribute('aria-expanded', 'true');\n                }\n                \n                const handleTransitionEnd = (e) => {\n                    if (e.target !== this.mlnExpander) return;\n                    \n                    this.mlnExpander.removeEventListener(this.mlnTransitionEnd, handleTransitionEnd);\n                    this.mlnExpander.style.height = 'auto';\n                    this.mlnExpander.style.height = '';\n                    this.mlnExpander.classList.add('mln__expander--showing');\n                    this.mlnExpander.classList.remove('mln__expander--transitioning');\n                    \n                    this.mlnExpander.dispatchEvent(MultilevelNav.createCustomEvent('shown.mln.expander'));\n                };\n                \n                this.mlnExpander.addEventListener(this.mlnTransitionEnd, handleTransitionEnd);\n                \n                // Prevent bubbling from child transitions\n                Array.from(this.mlnExpander.children).forEach(child => {\n                    child.addEventListener(this.mlnTransitionEnd, e => e.stopPropagation());\n                });\n            } else {\n                this.mlnExpander.dispatchEvent(MultilevelNav.createCustomEvent('hiding.mln.expander'));\n                \n                this.mlnExpander.classList.add('mln__expander--transitioning');\n                this.mlnExpander.style.height = collapseHeight + 'px';\n                this.mlnExpander.setAttribute('aria-hidden', 'true');\n                \n                if (expandBtn) {\n                    expandBtn.setAttribute('aria-expanded', 'false');\n                }\n                \n                setTimeout(() => {\n                    this.mlnExpander.classList.remove('mln__expander--showing');\n                    this.mlnExpander.style.height = '';\n                }, 10);\n                \n                const handleTransitionEnd = (e) => {\n                    if (e.target !== this.mlnExpander) return;\n                    \n                    this.mlnExpander.removeEventListener(this.mlnTransitionEnd, handleTransitionEnd);\n                    this.mlnExpander.classList.remove('mln__expander--transitioning');\n                    \n                    this.mlnExpander.dispatchEvent(MultilevelNav.createCustomEvent('hidden.mln.expander'));\n                };\n                \n                this.mlnExpander.addEventListener(this.mlnTransitionEnd, handleTransitionEnd);\n                \n                // Prevent bubbling from child transitions\n                Array.from(this.mlnExpander.children).forEach(child => {\n                    child.addEventListener(this.mlnTransitionEnd, e => e.stopPropagation());\n                });\n            }\n        }\n        \n        // Adjust attributes without animating the expander menu\n        if (animate === false && this.element.closest('.mln--navbar')) {\n            const expandBtn = this.element.querySelector('.mln__expand-btn');\n            \n            if (window.matchMedia(`(max-width: ${this.mlnDataBreakpoint - 1}px)`).matches) {\n                this.mlnExpander.classList.remove('mln__expander--showing');\n                this.mlnExpander.setAttribute('aria-hidden', 'true');\n                \n                if (expandBtn) {\n                    expandBtn.setAttribute('aria-expanded', 'false');\n                }\n            } else {\n                this.mlnExpander.setAttribute('aria-hidden', 'false');\n                \n                if (expandBtn) {\n                    expandBtn.setAttribute('aria-expanded', 'true');\n                }\n            }\n        }\n        \n        if (animate === false && this.element.classList.contains('mln--expand-above-breakpoint')) {\n            const expandBtn = this.element.querySelector('.mln__expand-btn');\n            \n            if (window.matchMedia(`(max-width: ${this.mlnDataBreakpoint - 1}px)`).matches) {\n                this.mlnExpander.classList.remove('mln__expander--showing');\n                this.mlnExpander.setAttribute('aria-hidden', 'true');\n                \n                if (expandBtn) {\n                    expandBtn.setAttribute('aria-expanded', 'false');\n                }\n            } else {\n                this.mlnExpander.classList.add('mln__expander--showing');\n                this.mlnExpander.setAttribute('aria-hidden', 'false');\n                \n                if (expandBtn) {\n                    expandBtn.setAttribute('aria-expanded', 'true');\n                }\n            }\n        }\n    }\n    \n    // Assign class to child items that run off the edge of the screen\n    assignFlowDirection() {\n        if (!this.settings.autoDirection) return;\n        \n        setTimeout(() => {\n            const hasChildElements = this.element.querySelectorAll('.mln__has-child');\n            \n            hasChildElements.forEach(hasChild => {\n                const bodyRect = document.body.getBoundingClientRect();\n                const elemRect = hasChild.getBoundingClientRect();\n                const mlnToggleChildOffset = (elemRect.left - bodyRect.left) + (hasChild.offsetWidth * 2);\n                \n                if (mlnToggleChildOffset > MultilevelNav.viewport().width && window.matchMedia(`(min-width: ${this.mlnDataBreakpoint}px)`).matches) {\n                    hasChild.classList.add('mln__child--flow-right');\n                } else {\n                    hasChild.classList.remove('mln__child--flow-right');\n                }\n            });\n        }, 300);\n    }\n    \n    // Keep items and parents with active class expanded on load\n    expandActiveItem() {\n        if (!this.settings.expandActiveItem) return;\n        \n        const activeSelector = this.settings.activeSelector;\n        const activeItems = this.mlnParentList.querySelectorAll(activeSelector);\n        \n        activeItems.forEach(activeItem => {\n            activeItem.classList.add('mln__has-child--expand-on-load');\n            \n            // Find all parent .mln__has-child elements and add the expand class\n            let parent = activeItem.closest('.mln__has-child');\n            while (parent) {\n                parent.classList.add('mln__has-child--expand-on-load');\n                parent = parent.parentElement.closest('.mln__has-child');\n            }\n        });\n        \n        const itemsToExpand = this.mlnParentList.querySelectorAll('.mln__has-child--expand-on-load');\n        \n        itemsToExpand.forEach(item => {\n            if (\n                !this.mlnIsPageLoaded || \n                (this.mlnParentList.closest('.mln--navbar') &&\n                window.matchMedia(`(max-width: ${this.mlnDataBreakpoint - 1}px)`).matches &&\n                !this.mlnIsPageLoaded)\n            ) {\n                this.toggleChild(item, 'show', false);\n            }\n            \n            if (\n                this.mlnParentList.closest('.mln--navbar') &&\n                window.matchMedia(`(min-width: ${this.mlnDataBreakpoint}px)`).matches\n            ) {\n                this.toggleChild(item, 'hide', false);\n            }\n        });\n        \n        if (this.settings.offCanvasScrollToActiveItem) {\n            const activeItems = this.element.querySelectorAll(this.settings.activeSelector);\n            const lastActiveItem = activeItems[activeItems.length - 1];\n            \n            if (lastActiveItem) {\n                const scrollToLoc = lastActiveItem.getBoundingClientRect().top;\n                const offCanvasArea = document.getElementById('offCanvasArea');\n                \n                if (offCanvasArea) {\n                    offCanvasArea.scrollTo({\n                        top: scrollToLoc,\n                        behavior: 'auto'\n                    });\n                }\n            }\n            \n            setTimeout(() => {\n                this.body.classList.add('js-off-canvas-scrolled');\n            }, 2);\n        }\n        \n        this.mlnIsPageLoaded = true;\n    }\n}\n\n// Helper function to initialize MultilevelNav on multiple elements\nconst multilevelNav = (selector, options) => {\n    const elements = document.querySelectorAll(selector);\n    const instances = [];\n    \n    elements.forEach(element => {\n        const instance = new MultilevelNav(element, options);\n        if (instance.mlnParentList) {\n            instances.push(instance);\n        }\n    });\n    \n    return instances;\n};\n\n// jQuery integration for multilevelNav\nif (typeof jQuery !== 'undefined') {\n    jQuery.fn.multilevelNav = function(options) {\n        return this.each(function() {\n            new MultilevelNav(this, options);\n        });\n    };\n}"],"file":"multilevel-nav.js"}