{"version":3,"names":[],"mappings":"","sources":["multilevel-nav.js"],"sourcesContent":["/*!\n  * Multilevel nav v4.0.0 Beta\n  */\n\n/*\n    TODO:\n    - Fix focus out of last item in navbar\n    - Arrow keys for child menus\n    - Fix slide over keyboard trapping if not in a navbar\n*/\n\n/* eslint-env es6 */\nlet mlnCurrent = 1;\n\n// Get browser width with or without scrollbar\nconst mlnViewport = () => {\n    let view = window;\n    let viewString = 'inner';\n\n    if (!('innerWidth' in window)) {\n        viewString = 'client';\n        view = document.documentElement || document.body;\n    }\n\n    return {\n        width: view[viewString + 'Width'],\n        height: view[viewString + 'Height']\n    };\n}\n\n// Custom event creator helper\nconst mlnCreateCustomEvent = (name, detail = null) => {\n    return new CustomEvent(name, {\n        bubbles: true,\n        cancelable: true,\n        detail: detail\n    });\n}\n\n// HoverIntent reimplementation (replacing jQuery plugin)\nconst mlnHoverIntent = (element, options) => {\n    const settings = Object.assign({\n        sensitivity: 7,\n        interval: 100,\n        timeout: 0,\n        over: () => {},\n        out: () => {}\n    }, options || {});\n    \n    let x, y, pX, pY;\n    let mouseover = false;\n    let timer;\n    \n    const track = (e) =>{\n        x = e.clientX;\n        y = e.clientY;\n    }\n    \n    const compare = (e) =>{\n        \n        // Compare mouse positions to see if mouse has slowed enough\n        if (Math.abs(pX - x) + Math.abs(pY - y) < settings.sensitivity) {\n            element.removeEventListener('mousemove', track);\n            mouseover = true;\n            \n            if (timer) clearTimeout(timer);\n            settings.over.call(element, e);\n        } else {\n            pX = x;\n            pY = y;\n            timer = setTimeout(() => compare(e), settings.interval);\n        }\n    }\n    \n    const delay = (e) => {\n        if (timer) clearTimeout(timer);\n        mouseover = false;\n        \n        if (settings.timeout) {\n            timer = setTimeout(() => {\n                if (!mouseover) settings.out.call(element, e);\n            }, settings.timeout);\n        } else {\n            settings.out.call(element, e);\n        }\n    }\n    \n    const handleMouseOver = (e) => {\n        if (timer) clearTimeout(timer);\n        \n        mouseover = true;\n        pX = e.clientX;\n        pY = e.clientY;\n        \n        element.addEventListener('mousemove', track);\n        timer = setTimeout(() => compare(e), settings.interval);\n    }\n    \n    const handleMouseOut = (e) =>{\n        if (timer) clearTimeout(timer);\n        element.removeEventListener('mousemove', track);\n        \n        if (mouseover) {\n            delay(e);\n        }\n    }\n    \n    // Attach events\n    element.addEventListener('mouseenter', handleMouseOver);\n    element.addEventListener('mouseleave', handleMouseOut);\n    \n    // Return object with cleanup method\n    return {\n        remove: () => {\n            element.removeEventListener('mouseenter', handleMouseOver);\n            element.removeEventListener('mouseleave', handleMouseOut);\n            element.removeEventListener('mousemove', track);\n            if (timer) clearTimeout(timer);\n        }\n    };\n}\n\n// Create resizing event\n(() => {\n    let windowWidth = window.innerWidth;\n    let resizeTO;\n    \n    window.addEventListener('resize', () => {\n        let newWindowWidth = window.innerWidth;\n        \n        if (windowWidth !== newWindowWidth) {\n            if (resizeTO) {\n                clearTimeout(resizeTO);\n            }\n            \n            resizeTO = setTimeout(() => {\n                window.dispatchEvent(mlnCreateCustomEvent('mlnResizeEnd'));\n            }, 150);\n        }\n        \n        windowWidth = newWindowWidth;\n    });\n})();\n\n// Main multilevel nav function\nconst multilevelNavSetup = (element, options = {}) => {\n    \n    if (!element) return;\n    \n    // Setting defaults\n    const settings = Object.assign({\n        hoverIntent: false,\n        hoverIntentTimeout: 250,\n        autoCloseNavbarMenus: true,\n        autoDirection: true,\n        toggleOnClickOnly: false,\n        expandActiveItem: false,\n        offCanvasScrollToActiveItem: false,\n        wholeLinkToggler: false,\n        topLevelWholeLinkToggler: false,\n        navbarMenuBackdrop: false,\n        navbarMegaMenuBackdrop: false,\n        activeSelector: '.active',\n        menuCloseOnInPageAnchorClick: false,\n        expanderCloseOnInPageAnchorClick: false,\n        autoCloseInactiveMenu: true,\n        excludeLevel: '-1',\n        childMenuTogglerSymbol: '<span class=\"mln__toggle-btn__chevron\"></span>',\n        keepMenuOpenOnFocusOut: false\n    }, options || {});\n\n    // Element selectors\n    const mlnParentList = element.querySelector('.mln__list');\n    const mlnExpander = element.querySelector('.mln__expander');\n    const mlnDataBreakpoint = (element.getAttribute('data-mln-breakpoint')) ? parseInt(element.getAttribute('data-mln-breakpoint')) : undefined;\n    const mlnToggleBtnVerbiage = 'Toggle items under';\n    const mlnTransitionEnd = 'transitionend';\n    const body = document.body;\n    let mlnIsPageLoaded = false;\n\n    // Show/hide menu(s)\n    const mlnToggleChild = (el, action, animate) => {\n        let mlnHasChild;\n        \n        // Handle different input types (element, event, or jQuery-like object)\n        if (el instanceof Element) {\n            mlnHasChild = el.closest('.mln__has-child');\n        } else if (el && el.target) {\n            mlnHasChild = el.target.closest('.mln__has-child');\n        } else if (el && el.closest) {\n            mlnHasChild = el.closest('.mln__has-child');\n        } else {\n            return;\n        }\n        \n        if (!mlnHasChild) return;\n        \n        const mlnChildToggler = mlnHasChild.querySelector('.mln__toggle-btn, .mln__toggle-link');\n        const mlnToggleChildCollapse = mlnHasChild.querySelector(':scope > .mln__child__collapse');\n        \n        if (!mlnChildToggler || !mlnToggleChildCollapse) return;\n        \n        let ariaExpandedValue;\n        let ariaHiddenValue;\n        \n        // Figure out what aria values to use\n        if (action === 'show') {\n            ariaExpandedValue = 'true';\n            ariaHiddenValue = 'false';\n        } else if (action === 'hide' || action === undefined) {\n            ariaExpandedValue = 'false';\n            ariaHiddenValue = 'true';\n        }\n        \n        // Trigger transition event\n        mlnHasChild.dispatchEvent(mlnCreateCustomEvent('transition.mln.child'));\n        \n        // Correct toggler attributes\n        mlnChildToggler.setAttribute('aria-expanded', ariaExpandedValue);\n        \n        // Grab height of inner collapse elements\n        const collapseHelper = mlnToggleChildCollapse.querySelector('.mln__child__collapse__helper');\n        const collapseHeight = collapseHelper ? collapseHelper.offsetHeight : 0;\n        \n        // Show collapsible child elements\n        if (action === 'show') {\n            mlnHasChild.classList.add('mln__has-child--showing');\n            \n            const mlnAnyShowing = element.querySelectorAll('.mln__has-child--showing');\n            \n            // Add class to body for regular menu backdrop\n            if (\n                mlnAnyShowing.length && \n                element.classList.contains('mln--navbar') &&\n                settings.navbarMenuBackdrop === true\n            ) {\n                body.classList.add('js-mln-menu-showing');\n            }\n            \n            // Add class to body for mega menu backdrop\n            if (\n                mlnHasChild.classList.contains('mln__has-child--mega-menu') &&\n                element.classList.contains('mln--navbar') &&\n                settings.navbarMegaMenuBackdrop === true\n            ) {\n                body.classList.add('js-mln-mega-menu-showing');\n            }\n            \n            mlnHasChild.dispatchEvent(mlnCreateCustomEvent('show.mln.child'));\n            \n            if (animate === true) {\n                mlnToggleChildCollapse.classList.add('mln__child--transitioning');\n                mlnToggleChildCollapse.style.height = collapseHeight + 'px';\n                mlnToggleChildCollapse.setAttribute('aria-hidden', ariaHiddenValue);\n                \n                const handleTransitionEnd = (e) => {\n                    if (e.target !== mlnToggleChildCollapse) return;\n                    \n                    mlnToggleChildCollapse.removeEventListener(mlnTransitionEnd, handleTransitionEnd);\n                    mlnToggleChildCollapse.style.height = 'auto';\n                    mlnToggleChildCollapse.classList.remove('mln__child--transitioning');\n                    mlnToggleChildCollapse.style.height = '';\n                    \n                    if (mlnToggleChildCollapse.getAttribute('aria-hidden') === 'false') {\n                        mlnToggleChildCollapse.classList.add('mln--height-auto');\n                        mlnToggleChildCollapse.classList.add('mln__child--overflow-visible');\n                    }\n                    \n                    mlnHasChild.dispatchEvent(mlnCreateCustomEvent('shown.mln.child'));\n                    mlnHasChild.dispatchEvent(mlnCreateCustomEvent('transitioned.mln.child'));\n                };\n                \n                mlnToggleChildCollapse.addEventListener(mlnTransitionEnd, handleTransitionEnd);\n            } else {\n                mlnToggleChildCollapse.style.height = 'auto';\n                mlnToggleChildCollapse.classList.add('mln--height-auto');\n                mlnToggleChildCollapse.setAttribute('aria-hidden', ariaHiddenValue);\n                mlnToggleChildCollapse.style.height = '';\n                mlnToggleChildCollapse.classList.add('mln__child--overflow-visible');\n                \n                mlnHasChild.dispatchEvent(mlnCreateCustomEvent('shown.mln.child'));\n                mlnHasChild.dispatchEvent(mlnCreateCustomEvent('transitioned.mln.child'));\n            }\n        }\n        \n        // Hide collapsible child elements\n        if (action === 'hide') {\n            mlnHasChild.classList.remove('mln__has-child--showing');\n            \n            const mlnAnyShowing = document.querySelectorAll('.mln--navbar .mln__has-child--showing');\n            \n            if (!mlnAnyShowing.length && document.querySelectorAll('.mln--navbar').length) {\n                body.classList.remove('js-mln-menu-showing');\n            }\n            \n            if (\n                mlnHasChild.classList.contains('mln__has-child--mega-menu') &&\n                !document.querySelector('.mln__has-child--mega-menu.mln__has-child--showing') &&\n                element.classList.contains('mln--navbar')\n            ) {\n                body.classList.remove('js-mln-mega-menu-showing');\n            }\n            \n            mlnHasChild.dispatchEvent(mlnCreateCustomEvent('hide.mln.child'));\n            \n            if (animate === true) {\n                mlnToggleChildCollapse.style.height = collapseHeight + 'px';\n                mlnToggleChildCollapse.style.minHeight = collapseHeight + 'px';\n                mlnToggleChildCollapse.classList.remove('mln__child--overflow-visible', 'mln--height-auto');\n                mlnToggleChildCollapse.setAttribute('aria-hidden', ariaHiddenValue);\n                mlnToggleChildCollapse.classList.add('mln__child--transitioning');\n                \n                // Force a reflow to ensure the initial height is applied before transitioning\n                mlnToggleChildCollapse.offsetHeight;\n                \n                // Set up transition end handler before changing height\n                const handleTransitionEnd = (e) => {\n                    if (e.target !== mlnToggleChildCollapse) return;\n                    \n                    mlnToggleChildCollapse.removeEventListener(mlnTransitionEnd, handleTransitionEnd);\n                    mlnToggleChildCollapse.classList.remove('mln__child--transitioning');\n                    mlnHasChild.dispatchEvent(mlnCreateCustomEvent('hidden.mln.child'));\n                    mlnHasChild.dispatchEvent(mlnCreateCustomEvent('transitioned.mln.child'));\n                };\n                \n                mlnToggleChildCollapse.addEventListener(mlnTransitionEnd, handleTransitionEnd);\n                \n                // Prevent bubbling from child transitions\n                Array.from(mlnToggleChildCollapse.children).forEach(child => {\n                    child.addEventListener(mlnTransitionEnd, e => e.stopPropagation());\n                });\n                \n                // Trigger the transition by changing height\n                mlnToggleChildCollapse.style.height = '';\n                mlnToggleChildCollapse.style.minHeight = '';\n            } else {\n                mlnToggleChildCollapse.classList.remove('mln__child--overflow-visible', 'mln--height-auto');\n                mlnToggleChildCollapse.setAttribute('aria-hidden', ariaHiddenValue);\n                mlnToggleChildCollapse.style.height = '';\n                \n                mlnHasChild.dispatchEvent(mlnCreateCustomEvent('hidden.mln.child'));\n                mlnHasChild.dispatchEvent(mlnCreateCustomEvent('transitioned.mln.child'));\n            }\n        }\n    }\n    \n    // Show/hide expander items\n    const mlnToggleExpander = (animate) => {\n        if (!mlnExpander) return;\n        \n        const collapseHelper = mlnExpander.querySelector('.mln__expander__helper');\n        \n        if (animate !== false && collapseHelper) {\n            const collapseHeight = collapseHelper.offsetHeight;\n            const expandBtn = element.querySelector('.mln__expand-btn');\n            \n            if (!mlnExpander.classList.contains('mln__expander--showing')) {\n                mlnExpander.dispatchEvent(mlnCreateCustomEvent('showing.mln.expander'));\n                \n                mlnExpander.classList.add('mln__expander--transitioning');\n                mlnExpander.style.height = collapseHeight + 'px';\n                mlnExpander.setAttribute('aria-hidden', 'false');\n                \n                if (expandBtn) {\n                    expandBtn.setAttribute('aria-expanded', 'true');\n                }\n                \n                const handleTransitionEnd = (e) => {\n                    if (e.target !== mlnExpander) return;\n                    \n                    mlnExpander.removeEventListener(mlnTransitionEnd, handleTransitionEnd);\n                    mlnExpander.style.height = 'auto';\n                    mlnExpander.style.height = '';\n                    mlnExpander.classList.add('mln__expander--showing');\n                    mlnExpander.classList.remove('mln__expander--transitioning');\n                    \n                    mlnExpander.dispatchEvent(mlnCreateCustomEvent('shown.mln.expander'));\n                };\n                \n                mlnExpander.addEventListener(mlnTransitionEnd, handleTransitionEnd);\n                \n                // Prevent bubbling from child transitions\n                Array.from(mlnExpander.children).forEach(child => {\n                    child.addEventListener(mlnTransitionEnd, e => e.stopPropagation());\n                });\n            } else {\n                mlnExpander.dispatchEvent(mlnCreateCustomEvent('hiding.mln.expander'));\n                \n                mlnExpander.classList.add('mln__expander--transitioning');\n                mlnExpander.style.height = collapseHeight + 'px';\n                mlnExpander.setAttribute('aria-hidden', 'true');\n                \n                if (expandBtn) {\n                    expandBtn.setAttribute('aria-expanded', 'false');\n                }\n                \n                setTimeout(() => {\n                    mlnExpander.classList.remove('mln__expander--showing');\n                    mlnExpander.style.height = '';\n                }, 10);\n                \n                const handleTransitionEnd = (e) => {\n                    if (e.target !== mlnExpander) return;\n                    \n                    mlnExpander.removeEventListener(mlnTransitionEnd, handleTransitionEnd);\n                    mlnExpander.classList.remove('mln__expander--transitioning');\n                    \n                    mlnExpander.dispatchEvent(mlnCreateCustomEvent('hidden.mln.expander'));\n                };\n                \n                mlnExpander.addEventListener(mlnTransitionEnd, handleTransitionEnd);\n                \n                // Prevent bubbling from child transitions\n                Array.from(mlnExpander.children).forEach(child => {\n                    child.addEventListener(mlnTransitionEnd, e => e.stopPropagation());\n                });\n            }\n        }\n        \n        // Adjust attributes without animating the expander menu\n        if (animate === false && element.closest('.mln--navbar')) {\n            const expandBtn = element.querySelector('.mln__expand-btn');\n            \n            if (window.matchMedia(`(max-width: ${mlnDataBreakpoint - 1}px)`).matches) {\n                mlnExpander.classList.remove('mln__expander--showing');\n                mlnExpander.setAttribute('aria-hidden', 'true');\n                \n                if (expandBtn) {\n                    expandBtn.setAttribute('aria-expanded', 'false');\n                }\n            } else {\n                mlnExpander.setAttribute('aria-hidden', 'false');\n                \n                if (expandBtn) {\n                    expandBtn.setAttribute('aria-expanded', 'true');\n                }\n            }\n        }\n        \n        if (animate === false && element.classList.contains('mln--expand-above-breakpoint')) {\n            const expandBtn = element.querySelector('.mln__expand-btn');\n            \n            if (window.matchMedia(`(max-width: ${mlnDataBreakpoint - 1}px)`).matches) {\n                mlnExpander.classList.remove('mln__expander--showing');\n                mlnExpander.setAttribute('aria-hidden', 'true');\n                \n                if (expandBtn) {\n                    expandBtn.setAttribute('aria-expanded', 'false');\n                }\n            } else {\n                mlnExpander.classList.add('mln__expander--showing');\n                mlnExpander.setAttribute('aria-hidden', 'false');\n                \n                if (expandBtn) {\n                    expandBtn.setAttribute('aria-expanded', 'true');\n                }\n            }\n        }\n    }\n    \n    // Assign class to child items that run off the edge of the screen\n    const assignFlowDirection = () => {\n        if (!settings.autoDirection) return;\n        \n        setTimeout(() => {\n            const hasChildElements = element.querySelectorAll('.mln__has-child');\n            \n            hasChildElements.forEach(hasChild => {\n                const bodyRect = document.body.getBoundingClientRect();\n                const elemRect = hasChild.getBoundingClientRect();\n                const mlnToggleChildOffset = (elemRect.left - bodyRect.left) + (hasChild.offsetWidth * 2);\n                \n                if (mlnToggleChildOffset > mlnViewport().width && window.matchMedia(`(min-width: ${mlnDataBreakpoint}px)`).matches) {\n                    hasChild.classList.add('mln__child--flow-right');\n                } else {\n                    hasChild.classList.remove('mln__child--flow-right');\n                }\n            });\n        }, 300);\n    }\n    \n    // Keep items and parents with active class expanded on load\n    const expandActiveItem = () => {\n        if (!settings.expandActiveItem) return;\n        \n        const activeSelector = settings.activeSelector;\n        const activeItems = mlnParentList.querySelectorAll(activeSelector);\n        \n        activeItems.forEach(activeItem => {\n            activeItem.classList.add('mln__has-child--expand-on-load');\n            \n            // Find all parent .mln__has-child elements and add the expand class\n            let parent = activeItem.closest('.mln__has-child');\n            while (parent) {\n                parent.classList.add('mln__has-child--expand-on-load');\n                parent = parent.parentElement.closest('.mln__has-child');\n            }\n        });\n        \n        const itemsToExpand = mlnParentList.querySelectorAll('.mln__has-child--expand-on-load');\n        \n        itemsToExpand.forEach(item => {\n            if (\n                !mlnIsPageLoaded || \n                (mlnParentList.closest('.mln--navbar') &&\n                window.matchMedia(`(max-width: ${mlnDataBreakpoint - 1}px)`).matches &&\n                !mlnIsPageLoaded)\n            ) {\n                mlnToggleChild(item, 'show', false);\n            }\n            \n            if (\n                mlnParentList.closest('.mln--navbar') &&\n                window.matchMedia(`(min-width: ${mlnDataBreakpoint}px)`).matches\n            ) {\n                mlnToggleChild(item, 'hide', false);\n            }\n        });\n        \n        if (settings.offCanvasScrollToActiveItem) {\n            const activeItems = element.querySelectorAll(settings.activeSelector);\n            const lastActiveItem = activeItems[activeItems.length - 1];\n            \n            if (lastActiveItem) {\n                const scrollToLoc = lastActiveItem.getBoundingClientRect().top;\n                const offCanvasArea = document.getElementById('offCanvasArea');\n                \n                if (offCanvasArea) {\n                    offCanvasArea.scrollTo({\n                        top: scrollToLoc,\n                        behavior: 'auto'\n                    });\n                }\n            }\n            \n            setTimeout(() => {\n                body.classList.add('js-off-canvas-scrolled');\n            }, 2);\n        }\n        \n        mlnIsPageLoaded = true;\n    }\n    \n    // Start modifying the DOM - only proceed if we have the parent list\n    if (!mlnParentList) return;\n    \n    // Add helper div inside expander\n    if (mlnExpander) {\n\n        // Create helper div\n        const helperDiv = document.createElement('div');\n        helperDiv.classList.add('mln__expander__helper');\n        \n        // Move all children to the helper div instead of replacing innerHTML\n        while (mlnExpander.firstChild) {\n            helperDiv.appendChild(mlnExpander.firstChild);\n        }\n        \n        // Append the helper div to the expander\n        mlnExpander.appendChild(helperDiv);\n    }\n    \n    // Open/close menu expander\n    const expanderButton = element.querySelector('.mln__expand-btn');\n    if (expanderButton) {\n        expanderButton.addEventListener('click', () => {\n            mlnToggleExpander();\n        });\n    }\n    \n    // Add depth class to nested list items\n    const nestedLi = mlnParentList.querySelectorAll('li:not(.mln__child__mega-menu li)');\n    nestedLi.forEach(li => {\n        \n        // Count parent li elements to determine level\n        let level = 1;\n        let parent = li.parentElement;\n        \n        while (parent && parent !== mlnParentList) {\n            if (parent.nodeName === 'LI') {\n                level++;\n            }\n            parent = parent.parentElement;\n        }\n        \n        li.classList.add('mln__level-' + level);\n    });\n    \n    // Find and modify mega menus\n    const megaMenus = mlnParentList.querySelectorAll('.mln__child__mega-menu');\n    megaMenus.forEach(megaMenu => {\n        const collapseDiv = document.createElement('div');\n        collapseDiv.classList.add('mln__child__collapse');\n        collapseDiv.setAttribute('tabindex', '-1');\n        \n        const helperDiv = document.createElement('div');\n        helperDiv.classList.add('mln__child__collapse__helper');\n        \n        // Insert the wrapper structure before the mega menu\n        megaMenu.parentNode.insertBefore(collapseDiv, megaMenu);\n        collapseDiv.appendChild(helperDiv);\n        helperDiv.appendChild(megaMenu);\n        \n        // Find closest li and add the has-child class\n        const parentLi = collapseDiv.closest('li');\n        if (parentLi) {\n            parentLi.classList.add('mln__has-child');\n        }\n    });\n    \n    // Add mega menu backdrop\n    if (settings.navbarMegaMenuBackdrop && !document.querySelector('.mln-backdrop')) {\n        const backdrop = document.createElement('div');\n        backdrop.classList.add('mln-backdrop');\n        body.appendChild(backdrop);\n    }\n    \n    // Find and modify child lists\n    const excludedSelector = `.mln__level-${settings.excludeLevel} > ul, .mln__level-${settings.excludeLevel} > ul ul`;\n    const childLists = Array.from(mlnParentList.querySelectorAll('ul'));\n    const excludedLists = Array.from(mlnParentList.querySelectorAll(excludedSelector));\n    \n    // Filter out excluded lists\n    const listsToProcess = childLists.filter(list => !excludedLists.includes(list));\n   \n    listsToProcess.forEach(parentList => {\n        const existingCollapse = parentList.parentNode.querySelector('.mln__child__collapse');\n        \n        if (existingCollapse) {\n            \n            // If there's already a collapse element, move the list to its helper\n            const parentCollapse = parentList.parentNode.querySelector('.mln__child__collapse__helper');\n            \n            if (parentCollapse) {\n                parentList.classList.add('mln__child__list');\n                parentCollapse.insertBefore(parentList, parentCollapse.firstChild);\n            }\n        } else if (!parentList.closest('.mln__child__mega-menu')) {\n            \n            // Create new collapse structure\n            parentList.classList.add('mln__child__list');\n            \n            const collapseDiv = document.createElement('div');\n            collapseDiv.classList.add('mln__child__collapse');\n            collapseDiv.setAttribute('tabindex', '-1');\n            \n            const helperDiv = document.createElement('div');\n            helperDiv.classList.add('mln__child__collapse__helper');\n            \n            // Insert the wrapper structure before the list\n            parentList.parentNode.insertBefore(collapseDiv, parentList);\n            collapseDiv.appendChild(helperDiv);\n            helperDiv.appendChild(parentList);\n            \n            // Find closest li and add the has-child class\n            const parentLi = collapseDiv.closest('li');\n            if (parentLi) {\n                parentLi.classList.add('mln__has-child');\n            }\n        }\n    });\n    \n    // Add mega menu modifier class to top level\n    const megaMenuElements = mlnParentList.querySelectorAll('.mln__child__mega-menu');\n    megaMenuElements.forEach(megaMenu => {\n        const closestLi = megaMenu.closest('li');\n        if (closestLi) {\n            closestLi.classList.add('mln__has-child--mega-menu');\n        }\n    });\n    \n    // Wrap the parent <a> tag in it's own div\n    const hasChildElements = mlnParentList.querySelectorAll('.mln__has-child');\n    hasChildElements.forEach(hasChild => {\n        const directLink = Array.from(hasChild.children).find(child => \n            child.tagName === 'A'\n        );\n        \n        if (directLink) {\n            const controlsDiv = document.createElement('div');\n            controlsDiv.classList.add('mln__child-controls');\n            \n            // Insert wrapper before the link\n            directLink.parentNode.insertBefore(controlsDiv, directLink);\n            \n            // Move link into wrapper\n            controlsDiv.appendChild(directLink);\n        }\n    });\n    \n    // Add a toggle button to list items with children\n    const childNavControls = mlnParentList.querySelectorAll('.mln__child-controls');\n    childNavControls.forEach(control => {\n        const parentLink = control.querySelector('a');\n        \n        if (parentLink) {\n            const linkText = parentLink.textContent.trim();\n            const ariaLabelValue = mlnToggleBtnVerbiage + ' ' + linkText;\n            \n            const toggleBtn = document.createElement('button');\n            toggleBtn.classList.add('mln__toggle-btn');\n            toggleBtn.setAttribute('type', 'button');\n            toggleBtn.setAttribute('aria-label', ariaLabelValue);\n            toggleBtn.innerHTML = settings.childMenuTogglerSymbol;\n            \n            control.appendChild(toggleBtn);\n        }\n    });\n    \n    // Assign IDs and attributes to child menu elements\n    const childCollapse = mlnParentList.querySelectorAll('.mln__child__collapse');\n    childCollapse.forEach((collapse, index) => {\n        const childCollapseId = 'mln' + mlnCurrent + 'ChildCollapse' + (index + 1);\n        \n        collapse.setAttribute('aria-hidden', 'true');\n        collapse.setAttribute('data-mln-active-status', 'off');\n        collapse.setAttribute('id', childCollapseId);\n        \n        const parentLi = collapse.closest('li');\n        if (parentLi) {\n            const toggleBtn = parentLi.querySelector('.mln__toggle-btn');\n            if (toggleBtn) {\n                toggleBtn.setAttribute('aria-expanded', 'false');\n                toggleBtn.setAttribute('aria-controls', childCollapseId);\n            }\n        }\n    });\n    \n    // Assign IDs and aria attributes to expander elements\n    if (mlnExpander) {\n        const mlnExpanderId = 'mln' + mlnCurrent + 'Expander1';\n        \n        mlnExpander.setAttribute('aria-hidden', 'true');\n        mlnExpander.setAttribute('id', mlnExpanderId);\n        \n        const expandBtn = element.querySelector('.mln__expand-btn');\n        if (expandBtn) {\n            expandBtn.setAttribute('aria-expanded', 'false');\n            expandBtn.setAttribute('aria-controls', mlnExpanderId);\n        }\n    }\n    \n    // Close main nav child menu if in page anchor is clicked\n    if (settings.menuCloseOnInPageAnchorClick) {\n        const anchors = element.querySelectorAll('a');\n        \n        anchors.forEach(anchor => {\n            const href = anchor.getAttribute('href');\n            \n            if (!href) return;\n            \n            const firstChar = href.charAt(0);\n            const isPageAnchor = (firstChar === '#');\n            \n            anchor.addEventListener('click', (e) => {\n                if (\n                    isPageAnchor &&\n                    !e.target.closest('.mln__toggle-link') &&\n                    window.matchMedia(`(min-width: ${mlnDataBreakpoint}px)`).matches\n                ) {\n                    const showingMenus = element.querySelectorAll('.mln__has-child--showing');\n                    showingMenus.forEach(menu => {\n                        mlnToggleChild(menu, 'hide', true);\n                    });\n                }\n            });\n        });\n    }\n    \n    // Close expander if in page anchor is clicked\n    if (settings.expanderCloseOnInPageAnchorClick) {\n        const anchors = element.querySelectorAll('a');\n        \n        anchors.forEach(anchor => {\n            const href = anchor.getAttribute('href');\n            \n            if (!href) return;\n            \n            const firstChar = href.charAt(0);\n            const isPageAnchor = (firstChar === '#');\n            \n            anchor.addEventListener('click', (e) => {\n                if (\n                    isPageAnchor &&\n                    !e.target.closest('.mln__toggle-link')\n                ) {\n                    mlnToggleExpander('hide');\n                }\n            });\n        });\n    }\n    \n    // Whole link click expand and/or top level whole link expand\n    if (settings.wholeLinkToggler || settings.topLevelWholeLinkToggler) {\n        let wholeElements = [];\n        \n        if (settings.wholeLinkToggler) {\n            wholeElements = Array.from(mlnParentList.querySelectorAll('.mln__child-controls > a'));\n            element.classList.add('mln--whole-link-expand');\n        }\n        \n        if (settings.topLevelWholeLinkToggler) {\n            \n            // Select only the direct children of mlnParentList that are .mln__has-child\n            const topLevelItems = Array.from(mlnParentList.children)\n                .filter(child => child.classList.contains('mln__has-child'));\n            \n            wholeElements = topLevelItems\n                .map(item => item.querySelector('.mln__child-controls > a'))\n                .filter(Boolean);\n            \n            element.classList.remove('mln--whole-link-expand');\n            element.classList.add('mln--top-level-whole-link-expand');\n        }\n        \n        wholeElements.forEach(wholeElement => {\n            const closestHasChild = wholeElement.closest('.mln__has-child');\n            const closestToggleBtn = closestHasChild.querySelector('.mln__toggle-btn');\n            \n            if (!closestToggleBtn) return;\n            \n            const ariaExpandedValue = closestToggleBtn.getAttribute('aria-expanded');\n            const ariaControlsValue = closestToggleBtn.getAttribute('aria-controls');\n            \n            const toggleIndicator = document.createElement('span');\n            toggleIndicator.classList.add('mln__toggle-indicator');\n            toggleIndicator.innerHTML = settings.childMenuTogglerSymbol;\n            wholeElement.appendChild(toggleIndicator);\n            \n            wholeElement.classList.add('mln__toggle-link');\n            wholeElement.setAttribute('role', 'button');\n            wholeElement.setAttribute('aria-expanded', ariaExpandedValue);\n            wholeElement.setAttribute('aria-controls', ariaControlsValue);\n            \n            wholeElement.addEventListener('click', (e) => {\n                wholeElement.focus();\n                e.preventDefault();\n            });\n            \n            // Remove the original toggle button\n            closestToggleBtn.remove();\n        });\n    }\n    \n    // Toggle-button click\n    const toggleButtons = mlnParentList.querySelectorAll('.mln__toggle-btn, .mln__toggle-link');\n    let touchDrag = false;\n    \n    // Add touchmove listener for iOS fix\n    toggleButtons.forEach(button => {\n        button.addEventListener('touchmove', () => {\n            touchDrag = true;\n        }, { passive: true });\n    });\n    \n    // Handle click and touch events\n    toggleButtons.forEach(button => {\n        const handleInteraction = (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            \n            const hasChildParent = button.closest('.mln__has-child');\n            if (!hasChildParent) return;\n            \n            const associatedMenu = hasChildParent.querySelector('.mln__child__collapse');\n            if (!associatedMenu) return;\n            \n            // Find sibling elements that are showing\n            const siblingShowing = Array.from(\n                hasChildParent.parentElement.querySelectorAll('.mln__has-child--showing')\n            ).filter(el => el !== hasChildParent);\n            \n            if (\n                (e.type === 'click' || e.type === 'touchend') &&\n                !touchDrag &&\n                !element.querySelector('.mln__has-child--showing.mln__child--transitioning')\n            ) {\n                if (\n                    window.matchMedia(`(min-width: ${mlnDataBreakpoint}px)`).matches &&\n                    settings.autoCloseNavbarMenus === true &&\n                    !button.closest('.mln--expand-above-breakpoint') &&\n                    button.closest('.mln--navbar')\n                ) {\n                    associatedMenu.setAttribute('data-mln-active-status', 'off');\n                    siblingShowing.forEach(sibling => {\n                        mlnToggleChild(sibling, 'hide', true);\n                    });\n                }\n                \n                if (hasChildParent.classList.contains('mln__has-child--showing')) {\n                    mlnToggleChild(button, 'hide', true);\n                    associatedMenu.setAttribute('data-mln-active-status', 'off');\n                } else {\n                    mlnToggleChild(button, 'show', true);\n                    associatedMenu.setAttribute('data-mln-active-status', 'on');\n                }\n            }\n            \n            touchDrag = false;\n        };\n        \n        button.addEventListener('touchend', handleInteraction);\n        button.addEventListener('click', handleInteraction);\n    });\n    \n    // Show/hide child menus with hoverIntent or just regular hover\n    if (!settings.toggleOnClickOnly) {\n        hasChildElements.forEach(hasChild => {\n            const associatedMenu = hasChild.querySelector('.mln__child__collapse');\n            \n            // Hover functions\n            const showMenu = () => {\n                if (associatedMenu) {\n                    associatedMenu.setAttribute('data-mln-active-status', 'on');\n                }\n                \n                if (\n                    window.matchMedia(`(min-width: ${mlnDataBreakpoint}px)`).matches &&\n                    hasChild.closest('.mln--navbar')\n                ) {\n                    mlnToggleChild(hasChild, 'show', true);\n                }\n            };\n            \n            const hideMenu = () => {\n                if (associatedMenu) {\n                    associatedMenu.setAttribute('data-mln-active-status', 'off');\n                }\n                \n                if (\n                    window.matchMedia(`(min-width: ${mlnDataBreakpoint}px)`).matches &&\n                    associatedMenu && \n                    associatedMenu.getAttribute('aria-hidden') === 'false' &&\n                    hasChild.closest('.mln--navbar')\n                ) {\n                    mlnToggleChild(hasChild, 'hide', true);\n                }\n            };\n            \n            if (settings.hoverIntent) {\n                \n                // Use hoverIntent implementation\n                mlnHoverIntent(hasChild, {\n                    over: showMenu,\n                    timeout: settings.hoverIntentTimeout,\n                    out: hideMenu\n                });\n            } else {\n                \n                // Use standard hover events\n                hasChild.addEventListener('mouseenter', () => {\n                    if (\n                        window.matchMedia(`(min-width: ${mlnDataBreakpoint}px)`).matches &&\n                        hasChild.closest('.mln--navbar')\n                    ) {\n                        if (hasChild.classList.contains('mln__has-child--showing')) {\n                            if (associatedMenu) {\n                                associatedMenu.setAttribute('data-mln-active-status', 'off');\n                            }\n                            mlnToggleChild(hasChild, 'hide', true);\n                        } else {\n                            if (associatedMenu) {\n                                associatedMenu.setAttribute('data-mln-active-status', 'on');\n                            }\n                            mlnToggleChild(hasChild, 'show', true);\n                        }\n                    }\n                });\n                \n                hasChild.addEventListener('mouseleave', () => {\n                    if (\n                        window.matchMedia(`(min-width: ${mlnDataBreakpoint}px)`).matches &&\n                        hasChild.closest('.mln--navbar')\n                    ) {\n                        if (associatedMenu) {\n                            associatedMenu.setAttribute('data-mln-active-status', 'off');\n                        }\n                        mlnToggleChild(hasChild, 'hide', true);\n                    }\n                });\n            }\n        });\n    }\n    \n    // Keyboarding\n    if (mlnParentList) {\n        let isCurrentMenuFocused;\n        \n        mlnParentList.addEventListener('keydown', (e) => {\n            const pressedKeyCode = e.keyCode;\n            const eTarget = e.target;\n            \n            // Escape key pressed (keyCode 27)\n            if (pressedKeyCode === 27) {\n                const associatedMenu = eTarget.closest('.mln__has-child--showing');\n                \n                if (associatedMenu) {\n                    \n                    // Find and focus the toggle button\n                    const toggleButton = associatedMenu.querySelector('.mln__toggle-btn, .mln__toggle-link');\n                    \n                    if (toggleButton) {\n                        toggleButton.focus();\n                    }\n                    \n                    // Hide the menu\n                    mlnToggleChild(associatedMenu, 'hide', true);\n                }\n            }\n            \n            // Tab key pressed (keyCode 9)\n            if (\n                pressedKeyCode === 9 &&\n                eTarget.getAttribute('aria-expanded') === 'false' &&\n                eTarget.parentNode.nextElementSibling &&\n                eTarget.parentNode.nextElementSibling.classList.contains('mln__child__collapse') &&\n                eTarget.parentNode.nextElementSibling.classList.contains('mln__child--transitioning')\n            ) {\n                \n                // Find the next focusable anchor\n                let nextFocusableAnchor = null;\n                const nextItem = eTarget.closest('.mln__has-child').nextElementSibling;\n                \n                if (nextItem) {\n                    nextFocusableAnchor = nextItem.querySelector('a');\n                }\n                \n                if (!nextFocusableAnchor) {\n                    const nextTopLevel = eTarget.closest('.mln__level-1').nextElementSibling;\n                    \n                    if (nextTopLevel) {\n                        nextFocusableAnchor = nextTopLevel.querySelector('a');\n                    }\n                    \n                    // Close all showing menus\n                    const showingItems = element.querySelectorAll('.mln__has-child--showing');\n                    showingItems.forEach(item => {\n                        mlnToggleChild(item, 'hide', true);\n                    });\n                }\n                \n                if (nextFocusableAnchor) {\n                    e.preventDefault();\n                    nextFocusableAnchor.focus();\n                }\n            }\n        });\n        \n        // Close inactive menus when tabbing out of them\n        mlnParentList.addEventListener('keyup', (e) => {\n            const eTarget = e.target;\n            \n            if (\n                !eTarget.closest('.mln__has-child--showing') &&\n                window.matchMedia(`(min-width: ${mlnDataBreakpoint}px)`).matches &&\n                settings.autoCloseInactiveMenu === true &&\n                eTarget.closest('.mln--navbar')\n            ) {\n                const showingItems = element.querySelectorAll('.mln__has-child--showing');\n                showingItems.forEach(item => {\n                    mlnToggleChild(item, 'hide', true);\n                });\n            }\n        });\n        \n        // Close any menu when leaving currently focused menu parent\n        if (!settings.keepMenuOpenOnFocusOut) {\n            mlnParentList.addEventListener('focusout', (e) => {\n                setTimeout(() => {\n                    if (window.matchMedia(`(min-width: ${mlnDataBreakpoint}px)`).matches) {\n                        const activeElement = document.activeElement;\n                        const nonActiveMenus = Array.from(document.querySelectorAll('.mln--navbar')).filter(\n                            menu => !menu.contains(activeElement)\n                        );\n                        \n                        nonActiveMenus.forEach(menu => {\n                            const showingItems = menu.querySelectorAll('.mln__has-child--showing');\n                            showingItems.forEach(item => {\n                                mlnToggleChild(item, 'hide', true);\n                            });\n                        });\n                    }\n                    \n                    isCurrentMenuFocused = \n                        document.activeElement.closest('.mln--navbar') && \n                        document.activeElement.closest('.mln__list') ? true : false;\n\n                    if (\n                        !isCurrentMenuFocused &&\n                        window.matchMedia(`(min-width: ${mlnDataBreakpoint}px)`).matches &&\n                        e.type !== 'keydown' &&\n                        settings.autoCloseNavbarMenus === true &&\n                        e.target.closest('.mln--navbar') &&\n                        !document.activeElement.closest('.mln__has-child--showing')\n                    ) {\n                        const showingItems = element.querySelectorAll('.mln__has-child--showing');\n                        showingItems.forEach(item => {\n                            mlnToggleChild(item, 'hide', true);\n                        });\n                    }\n                }, 150);\n            });\n        }\n    }\n    \n    // Add special class to the current showing menu\n    element.addEventListener('transition.mln.child', () => {\n        const visibleMenus = element.querySelectorAll('.mln__visible-menu');\n        visibleMenus.forEach(menu => menu.classList.remove('mln__visible-menu'));\n    });\n    \n    // Add event listeners for show/hide/initialize events\n    ['hide.mln.child', 'show.mln.child'].forEach(eventName => {\n        element.addEventListener(eventName, () => {\n            updateVisibleMenu();\n        });\n    });\n    \n    const updateVisibleMenu = () => {\n        const showingItems = element.querySelectorAll('.mln__has-child--showing');\n        \n        if (showingItems.length === 0) {\n            const mainList = element.querySelector('.mln__list');\n            if (mainList) {\n                mainList.classList.add('mln__visible-menu');\n            }\n        } else {\n            const lastShowing = showingItems[showingItems.length - 1];\n            if (lastShowing) {\n                lastShowing.classList.add('mln__visible-menu');\n            }\n        }\n    }\n    \n    // Handle resize end events\n    window.addEventListener('mlnResizeEnd', () => {\n        if (\n            window.matchMedia(`(min-width: ${mlnDataBreakpoint}px)`).matches &&\n            settings.autoCloseNavbarMenus === true &&\n            settings.expandActiveItem === false\n        ) {\n            const showingItems = element.querySelectorAll('.mln__has-child--showing');\n            showingItems.forEach(item => {\n                mlnToggleChild(item, 'hide', false);\n            });\n            \n            if (mlnExpander) {\n                mlnExpander.style.height = '';\n                mlnExpander.classList.remove('mln__expander--showing');\n            }\n        }\n        \n        // Run functions after resize\n        expandActiveItem();\n        mlnToggleExpander(false);\n        assignFlowDirection();\n    });\n    \n    // Run functions on load\n    expandActiveItem();\n    mlnToggleExpander(false);\n    assignFlowDirection();\n    \n    // Add loaded class\n    element.classList.add('mln--js-loaded');\n    \n    // Trigger initialized event\n    element.dispatchEvent(mlnCreateCustomEvent('initialized.mln'));\n    updateVisibleMenu();\n    mlnCurrent++;\n    \n    // Return API for programmatic control\n    return {\n        element: element,\n        toggleChild: mlnToggleChild,\n        toggleExpander: mlnToggleExpander,\n        assignFlowDirection: assignFlowDirection,\n        expandActiveItem: expandActiveItem\n    };\n}\n\n// Helper function to initialize multilevelNav on multiple elements\nconst multilevelNav = (selector, options) => {\n    const elements = document.querySelectorAll(selector);\n    const instances = [];\n    \n    elements.forEach(element => {\n        const instance = multilevelNavSetup(element, options);\n        if (instance) {\n            instances.push(instance);\n        }\n    });\n    \n    return instances;\n}\n\n// Jquery initialization method using $ or jQuery\nif (typeof jQuery !== 'undefined') {\n    jQuery.fn.multilevelNav = function(options) {\n        return this.each(function() {\n            multilevelNavSetup(this, options);\n        });\n    };\n}"],"file":"multilevel-nav.js"}