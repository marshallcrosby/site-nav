{"version":3,"names":[],"mappings":"","sources":["multilevel-nav-slide-over.js"],"sourcesContent":["/*!\n  * Multilevel nav slide over extension v2.0.0.0 Beta\n  */\n\n/* eslint-env es6 */\n\nconst isVisible = (el) => {\n    const style = window.getComputedStyle(el);\n    return style.display !== 'none' && style.visibility !== 'hidden' && el.offsetParent !== null;\n}\n\nconst getTabbableElements = (container) => {\n    const tabbableElementsArray = [\n        'a[href]',\n        'area[href]',\n        'input:not([disabled])',\n        'select:not([disabled])',\n        'textarea:not([disabled])',\n        'button:not([disabled])',\n        'iframe',\n        'object',\n        'embed',\n        '[tabindex=\"0\"]',\n        '[contenteditable]'\n    ];\n\n    return Array.from(container.querySelectorAll(tabbableElementsArray)).filter(el => isVisible(el) && el.tabIndex >= 0);\n}\n\nlet keydownHandler = null;\n\nconst slideOverKeyboardTrap = (el) => {\n\n    const container = el.closest('.l-off-canvas') || el;\n    // const container = el;\n\n    // Save currently focused element to return to it later\n    focusBeforeOffCanvas = document.activeElement;\n\n    keydownHandler = (e) => {\n        if (e.key === 'Tab') {\n            const tabbable = getTabbableElements(container);\n            const first = tabbable[0];\n            const last = tabbable[tabbable.length - 1];\n\n            if (tabbable.length === 0) {\n                e.preventDefault();\n                return;\n            }\n\n            if (e.shiftKey && document.activeElement === first) {\n                e.preventDefault();\n                last.focus();\n            } else if (!e.shiftKey && document.activeElement === last) {\n                e.preventDefault();\n                first.focus();\n            }\n        }\n    };\n\n    container.addEventListener('keydown', keydownHandler);\n\n    const initialTabbable = getTabbableElements(container)[0];\n    \n    if (!document.querySelector('.mln__list .active') && initialTabbable) {\n        initialTabbable.focus();\n    }\n}\n\nconst removeTrapKeyboardHandlers = (el) => {\n    if (keydownHandler) {\n        el.removeEventListener('keydown', keydownHandler);\n        keydownHandler = null;\n        // focusBeforeOffCanvas.focus();\n    }\n}\n\nconst multilevelSlideOverSetup = (elements, options = {}) => {\n    \n    // Handle string selectors\n    if (typeof elements === 'string') {\n        elements = document.querySelectorAll(elements);\n    }\n    \n    // Handle single element\n    if (elements instanceof HTMLElement) {\n        elements = [elements];\n    }\n    \n    // Convert NodeList to array if needed\n    if (elements instanceof NodeList) {\n        elements = Array.from(elements);\n    }\n\n    // Default settings\n    const defaults = {\n        slideTitles: true,\n        slideTitleLink: false,\n        backButtonSymbol: '&lsaquo;',\n        dynamicBackButtonTitle: false,\n        offCanvasCloseAllMenus: false\n    };\n    \n    // Merge defaults with options\n    const settings = {...defaults, ...options};\n    \n    // Process each element\n    elements.forEach(element => {\n        const mlnDataBreakpoint = (element.getAttribute('data-mln-breakpoint')) ? parseInt(element.getAttribute('data-mln-breakpoint')) : undefined;\n\n        // Function to close all child menus\n        const closeAllChildren = () => {\n            if (element.classList.contains('mln--navbar-slide-over')) {\n                \n                // Hide all expanded elements\n                const hiddenElements = element.querySelectorAll('[aria-hidden=\"false\"]');\n                hiddenElements.forEach(el => {\n                    el.setAttribute('aria-hidden', 'true');\n                    el.classList.remove('mln--height-auto', 'mln__child--overflow-visible');\n                });\n                \n                // Remove visible menu class\n                const visibleMenus = element.querySelectorAll('.mln__visible-menu');\n                visibleMenus.forEach(menu => {\n                    menu.classList.remove('mln__visible-menu');\n                });\n                \n                // Add visible menu class to main list\n                const mainList = element.querySelector('.mln__list');\n                if (mainList) {\n                    mainList.classList.add('mln__visible-menu');\n                }\n                \n                // Collapse expanded elements\n                const expandedElements = element.querySelectorAll('[aria-expanded=\"true\"]');\n                expandedElements.forEach(el => {\n                    el.setAttribute('aria-expanded', 'false');\n                    const hasChild = el.closest('.mln__has-child--showing');\n\n                    if (hasChild) {\n                        hasChild.classList.remove('mln__has-child--showing');\n                    }\n                });\n                \n                // Reset min-height\n                element.style.minHeight = '';\n            }\n        }\n        \n        // Set height on certain elements to make the outer nav height the same\n        // height as the current viewable slide\n        const setDynamicHeight = () => {\n            \n            // Reset inline styles\n            element.querySelectorAll('.mln__child__collapse').forEach(el => {\n                el.style.minHeight = '';\n            });\n\n            // Get the last showing has-child element\n            const allShowing = element.querySelectorAll('.mln__has-child.mln__has-child--showing');\n            const lastShowing = allShowing[allShowing.length - 1] || null;\n\n            let parentCollapse = null;\n            let latestChildShowing = null;\n\n            if (lastShowing) {\n                parentCollapse = lastShowing.closest('.mln__child__collapse');\n\n                const directCollapse = lastShowing.querySelector(':scope > .mln__child__collapse');\n                if (directCollapse) {\n                    latestChildShowing = directCollapse.querySelector(':scope > .mln__child__collapse__helper');\n                }\n            }\n\n            // Determine element to get height from\n            const getHeightFromThis = latestChildShowing || element.querySelector('.mln__list');\n\n            // Get height\n            const dynamicHeight = getHeightFromThis ? getHeightFromThis.offsetHeight : 0;\n\n            // Apply height to nav\n            element.style.minHeight = dynamicHeight + 'px';\n\n            // Apply height to parent collapse if available\n            if (parentCollapse) {\n                parentCollapse.style.minHeight = dynamicHeight + 'px';\n            }\n        }\n\n        \n        // Add slide-over controls to each child menu\n        const hasChildElements = element.querySelectorAll('.mln__has-child');\n        \n        hasChildElements.forEach(navEl => {\n            const childCollapse = navEl.querySelector('.mln__child__collapse');\n            \n            if (!childCollapse) return;\n            \n            const currentMenuId = childCollapse.getAttribute('id');\n            const collapseHelper = childCollapse.querySelector('.mln__child__collapse__helper');\n            const menuSectionLink = navEl.querySelector('.mln__child-controls > a');\n            \n            if (!collapseHelper || !menuSectionLink) return;\n            \n            const menuSectionLabel = menuSectionLink.innerHTML;\n            const backButtonSymbol = settings.backButtonSymbol ? \n                `<span aria-hidden=\"true\">${settings.backButtonSymbol}</span> ` : '';\n            \n            const isNotLinkable = menuSectionLink.getAttribute('data-mln-not-linkable');\n            const useMenuText = isNotLinkable || settings.dynamicBackButtonTitle;\n            const backButtonText = useMenuText ? \n                `${backButtonSymbol}${menuSectionLink.textContent}` : \n                `${backButtonSymbol}Back`;\n            \n            // Create controls container\n            const controlsDiv = document.createElement('div');\n            controlsDiv.className = 'mln__slide-over-controls';\n            collapseHelper.insertBefore(controlsDiv, collapseHelper.firstChild);\n            \n            // Create back button\n            const backBtn = document.createElement('button');\n            backBtn.className = 'mln__back-btn';\n            backBtn.setAttribute('type', 'button');\n            backBtn.setAttribute('aria-controls', currentMenuId);\n            backBtn.innerHTML = backButtonText;\n            controlsDiv.appendChild(backBtn);\n            \n            // Build slide title (no link)\n            if (settings.slideTitles && !settings.slideTitleLink) {\n                const titleSpan = document.createElement('span');\n                titleSpan.className = 'mln__slide-over-title';\n                titleSpan.innerHTML = menuSectionLabel;\n                controlsDiv.appendChild(titleSpan);\n            }\n            \n            // Build slide title with link\n            if (settings.slideTitles && settings.slideTitleLink) {\n                const titleLink = menuSectionLink.cloneNode(true);\n                titleLink.classList.add('mln__slide-over-title');\n                titleLink.classList.remove('mln__toggle-link');\n                titleLink.removeAttribute('role');\n                titleLink.removeAttribute('aria-expanded');\n                titleLink.removeAttribute('aria-controls');\n                \n                // Remove toggle indicator if exists\n                const toggleIndicator = titleLink.querySelector('.mln__toggle-indicator');\n                if (toggleIndicator) {\n                    toggleIndicator.remove();\n                }\n                \n                controlsDiv.appendChild(titleLink);\n            }\n            \n            // Add back button click handler\n            backBtn.addEventListener('click', () => {\n                const toggleElement = navEl.querySelector(`.mln__toggle-btn[aria-controls=\"${currentMenuId}\"], .mln__toggle-link[aria-controls=\"${currentMenuId}\"]`);\n                \n                if (toggleElement) {\n                    \n                    // Create and dispatch click event\n                    const clickEvent = new MouseEvent('click', {\n                        bubbles: true,\n                        cancelable: true,\n                        view: window\n                    });\n\n                    toggleElement.dispatchEvent(clickEvent);\n                }\n            });\n        });\n        \n        // Event listeners for navigation events\n        element.addEventListener('show.mln.child', () => {\n            if (\n                (element.classList.contains('mln--navbar-slide-over') && \n                window.matchMedia(`(max-width: ${mlnDataBreakpoint - 1}px)`).matches) || \n                mlnDataBreakpoint === undefined\n            ) {\n                setDynamicHeight();\n            }\n        });\n        \n        element.addEventListener('hide.mln.child', () => {\n            if (\n                (element.classList.contains('mln--navbar-slide-over') && \n                window.matchMedia(`(max-width: ${mlnDataBreakpoint - 1}px)`).matches) || \n                mlnDataBreakpoint === undefined\n            ) {\n                setDynamicHeight();\n            }\n        });\n        \n        element.addEventListener('shown.mln.child', () => {\n            const showingElements = element.querySelectorAll('.mln__has-child--showing');\n            \n            if (showingElements.length) {\n                const latestNavShowing = showingElements[showingElements.length - 1];\n                latestNavShowing.classList.add('mln__has-child--active');\n                \n                const childCollapse = latestNavShowing.querySelector('.mln__child__collapse');\n                \n                if (childCollapse) {\n                    removeTrapKeyboardHandlers(childCollapse);\n                    \n                    if (\n                        element.classList.contains('mln--navbar-slide-over') &&\n                        window.matchMedia(`(max-width: ${mlnDataBreakpoint - 1}px)`).matches\n                    ) {\n                        slideOverKeyboardTrap(childCollapse);\n                    }\n                }\n            }\n        });\n        \n        // Handle off-canvas close if needed\n        if (settings.offCanvasCloseAllMenus) {\n            const offCanvasToggles = document.querySelectorAll('[data-oc-toggle], [data-oc-close]');\n            \n            offCanvasToggles.forEach(toggleButton => {\n                \n                // Use a one-time listener\n                const clickHandler = () => {\n                    if (toggleButton.getAttribute('aria-expanded') === 'true') {\n                        \n                        // Listen for hidden.offCanvas event\n                        document.addEventListener('hidden.offCanvas', function offCanvasHiddenHandler() {\n                            closeAllChildren();\n                            document.removeEventListener('hidden.offCanvas', offCanvasHiddenHandler);\n                        });\n                    }\n                };\n                \n                toggleButton.addEventListener('click', clickHandler);\n            });\n        }\n        \n        // Initialize dynamic height\n        setDynamicHeight();\n        \n        // Handle resize events\n        window.addEventListener('mlnResizeEnd', () => {\n            if (element.classList.contains('mln--navbar-slide-over') && window.matchMedia(`(min-width: ${mlnDataBreakpoint}px)`).matches) {\n                const childCollapse = element.closest('.l-off-canvas') || element.querySelector('.mln__child__collapse');\n\n                if (childCollapse) {\n                    removeTrapKeyboardHandlers(childCollapse);\n                }\n\n                element.style.minHeight = '';\n            } else {\n                setDynamicHeight();\n            }\n        });\n    });\n    \n    // Return the processed elements for chaining\n    return elements;\n}\n\n// Helper function to initialize multilevelNavSlideOver on multiple elements\nconst multilevelNavSlideOver = (selector, options) => {\n    const elements = document.querySelectorAll(selector);\n    const instances = [];\n    \n    elements.forEach(element => {\n        const instance = multilevelSlideOverSetup(element, options);\n        \n        if (instance) {\n            instances.push(instance);\n        }\n    });\n    \n    return instances;\n}\n\n// Jquery initialization method using $ or jQuery\nif (typeof jQuery !== 'undefined') {\n    jQuery.fn.multilevelNavSlideOver = function(options) {\n        return this.each(function() {\n            multilevelSlideOverSetup(this, options);\n        });\n    };\n}"],"file":"multilevel-nav-slide-over.js"}